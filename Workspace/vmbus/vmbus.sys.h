/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'vmbus.sys'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _DEVICE_OBJECT;
struct _DRIVER_OBJECT;
struct _DRIVER_EXTENSION;
struct _VPB;
struct _SECTION_OBJECT_POINTERS;
struct _FILE_OBJECT;
struct _KEVENT;
struct _IO_COMPLETION_CONTEXT;
struct _FILE_BASIC_INFORMATION;
struct _FILE_STANDARD_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _OWNER_ENTRY;
struct _ERESOURCE;
struct _MDL;
struct _COMPRESSED_DATA_INFO;
struct _IRP;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _ACCESS_STATE;
struct _IO_SECURITY_CONTEXT;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _INTERFACE;
struct _DEVICE_CAPABILITIES;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _POWER_SEQUENCE;
struct _CM_RESOURCE_LIST;
struct _IO_STACK_LOCATION;
struct _KAPC;
struct _FAST_IO_DISPATCH;
struct _KDPC;
struct _DEVOBJ_EXTENSION;
struct WDFQUEUE__;
struct WDFREQUEST__;
struct WDFDEVICE__;
struct WDFIOTARGET__;
struct WDFSTRING__;
struct WDFWORKITEM__;
struct WDFCOLLECTION__;
struct WDFWAITLOCK__;
struct VMBUS_PIPE_INDICATION_CONTEXT__;
struct VMBCHANNEL__;
struct _DV_HANDLE_ENTRY;
struct _RTL_AVL_TABLE;
struct $C7CF0B33A06A93C83C053C117C90164E;
struct _VID_PARTITION_INFORMATION;
struct _VID_BULK_LOCK_RANGE;
struct _XPART_VID_TARGET_CONTEXT;
struct _XPART_WAIT_FOR_CONNECT;
struct _XPART_INTERRUPT_PAGE;
union _HV_MONITOR_TRIGGER_GROUP;
struct _HV_MONITOR_PAGE;
struct _XPART_PARTITION;
struct _XPART_SEND_MESSAGE;
struct _XPART_INTERRUPT;
struct _XPART_INTERRUPT_REQUIREMENTS;
struct _HV_MESSAGE_PAGE;
struct _MVM_CONTEXT;
struct VMBWORKITEM__;

/* 106 */
enum WPP_CTL_NAMES : __int32
{
  WPP_CTL_VMBusDriverTraceGuid = 0x0,
  WPP_LAST_CTL = 0x1,
};

/* 107 */
enum WPP_DEFINE_BIT_NAMES : __int32
{
  WPP_BLOCK_START_VMBusDriverTraceGuid = 0x0,
  WPP_BIT_DBG_INIT = 0x1,
  WPP_BIT_DBG_PNP = 0x2,
  WPP_BIT_DBG_GPA_RANGES = 0x3,
  WPP_BIT_DBG_IOCTLS = 0x4,
  WPP_BIT_DBG_MISC = 0x5,
  WPP_BIT_DBG_COMMON_ISR = 0x6,
  WPP_BIT_DBG_CLIENT = 0x7,
  WPP_BIT_DBG_SERVER = 0x8,
  WPP_BIT_DBG_TPAGE = 0x9,
  WPP_BIT_DBG_INCOMING = 0xA,
  WPP_BIT_DBG_OUTGOING = 0xB,
  WPP_BIT_DBG_VMBUS_INTERFACE = 0xC,
  WPP_BIT_DBG_CREATE = 0xD,
  WPP_BIT_DBG_CHINIT = 0xE,
  WPP_BIT_DBG_CHSERVER = 0xF,
  WPP_BIT_DBG_CHCLIENT = 0x10,
  WPP_BIT_DBG_REFCOUNTS = 0x11,
  WPP_BIT_DBG_CACHE = 0x12,
  WPP_BIT_DBG_INTERRUPT = 0x13,
  WPP_BIT_DBG_MESSAGES = 0x14,
  WPP_BIT_DBG_PIPE = 0x15,
  WPP_BIT_CHANNEL = 0x16,
  WPP_BIT_OFFERCACHE = 0x17,
  WPP_BIT_BUSDRIVER = 0x18,
  WPP_BIT_XPART = 0x19,
  WPP_BIT_DBG_VTF_INTERFACE = 0x1A,
  WPP_BLOCK_END_VMBusDriverTraceGuid = 0x1B,
};

/* 112 */
enum _VMBUS_CHANNEL_ACTION : __int32
{
  VmbusChannelActionNone = 0x0,
  VmbusChannelActionOpened = 0x1,
  VmbusChannelActionOpenFailed = 0x2,
  VmbusChannelActionClosed = 0x3,
  VmbusChannelActionRescinded = 0x4,
};

/* 113 */
enum _VMBUS_CHANNEL_IOCTL_TYPE : __int32
{
  IOCTL_VMBUS_WAIT_FOR_ACTION = 0x3EC008,
  IOCTL_VMBUS_OFFER_CHANNEL = 0x3EC01C,
  IOCTL_VMBUS_CREATE_PIPE = 0x3EC03C,
  IOCTL_VMBUS_GET_SAVE_INFO = 0x3EC046,
  IOCTL_VMBUS_PUT_SAVE_INFO = 0x3EC048,
  IOCTL_VMBUS_VDEV_SETUP = 0x3EC04C,
  IOCTL_VMBUS_CONNECT_PIPE = 0x3EC058,
  IOCTL_VMBUS_PAUSE = 0x3EC064,
  IOCTL_VMBUS_RESUME = 0x3EC068,
  IOCTL_VMBUS_VDEV_RESET = 0x3EC06C,
  IOCTL_VMBUS_VDEV_WAIT_FOR_CONNECT = 0x3EC074,
  IOCTL_VMBUS_VDEV_POWER_OFF = 0x3EC078,
  IOCTL_VMBUS_VDEV_UPDATE_SERVICE_INFO = 0x3EC07C,
  IOCTL_VMBUS_VDEV_GET_SERVICE_INFO = 0x3EC084,
  IOCTL_VMBUS_VDEV_UPDATE_SERVICE_TABLE = 0x3EC088,
  IOCTL_VMBUS_PIPE_RDMA_FILE_IO = 0x3EC08C,
  IOCTL_VMBUS_PIPE_GET_SAVE_INFO = 0x3EC090,
  IOCTL_VMBUS_PIPE_PUT_SAVE_INFO = 0x3EC094,
  IOCTL_VMBUS_QUERY_CHANNEL = 0x3EC024,
  IOCTL_VMBUS_RING_BUFFER = 0x3EC02E,
  IOCTL_VMBUS_OPEN_CHANNEL = 0x3EC034,
  IOCTL_VMBUS_CLOSE_CHANNEL = 0x3EC040,
  IOCTL_VMBUS_GET_CRASH_INTERFACE = 0x3EC080,
  IOCTL_VMBUS_RDMA_CREATE_MEMORY_DESCRIPTOR = 0x3EC098,
  IOCTL_VMBUS_RDMA_INVALIDATE_MEMORY_DESCRIPTOR = 0x3EC09C,
};

/* 116 */
enum _VMBUS_CRASH_PACKET_TYPE : __int32
{
  VmbusCrashPacketNone = 0x0,
  VmbusCrashPacketSimple = 0x1,
  VmbusCrashPacketTransactional = 0x2,
  VmbusCrashPacketCompletion = 0x3,
};

/* 126 */
enum _VMBUS_DEVICE_INTERFACE_STATE : __int32
{
  VmbusDeviceInterfaceClosed = 0x0,
  VmbusDeviceInterfaceOpeningByVmbus = 0x1,
  VmbusDeviceInterfaceNotifyPending = 0x2,
  VmbusDeviceInterfaceOpened = 0x3,
  VmbusDeviceInterfaceRemoved = 0x4,
};

/* 145 */
enum _XPART_VMBUS_VECTOR_TYPE : __int32
{
  XPartVMBusInterruptBitmap = 0x0,
  XPartVMBusInterruptRing = 0x1,
  XPartVMBusInterruptCount = 0x2,
};

/* 148 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 714 */
struct _VMBUS_GET_SERVICE_INFO_INPUT_PARAMETERS
{
  _GUID ServiceId;
};

/* 718 */
struct _PACKET_RING_CONTEXT
{
  _VMRCB *Control;
  volatile unsigned __int8 *Data;
  unsigned int DataBytesInRing;
};

/* 721 */
struct _VMB_CHANNEL_CLIENT_STATS
{
  unsigned __int64 PipeBytesRead;
  unsigned __int64 PipeBytesWritten;
  unsigned __int64 PipeReads;
  unsigned __int64 PipeWrites;
};

/* 121 */
enum _PIPE_STATE : __int32
{
  PipeDisabled = 0x0,
  PipeClosed = 0x1,
  PipePausedDisconnected = 0x2,
  PipePausedConnected = 0x3,
  PipeOpenDisconnected = 0x4,
  PipeOpenConnected = 0x5,
};

/* 184 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 719 */
struct _PACKET_LIB_CONTEXT
{
  _PACKET_RING_CONTEXT Outgoing;
  _PACKET_RING_CONTEXT Incoming;
  _MDL *IncomingDoubleMappedMdl;
  _MDL *OutgoingDoubleMappedMdl;
  __declspec(align(64)) unsigned int IncomingInCache;
  unsigned int IncomingOut;
  unsigned int EmptyRingBufferCount;
  unsigned int NonspuriousInterruptCount;
  __declspec(align(64)) unsigned int OutgoingIn;
  unsigned int OutgoingOutCache;
  unsigned int PendingSendSize;
  unsigned int FullRingBufferCount;
  unsigned __int64 StaticInterruptMaskSkips;
  unsigned __int64 *InterruptMaskSkips;
};

/* 3 */
enum _POOL_TYPE : __int32
{
  NonPagedPool = 0x0,
  NonPagedPoolExecute = 0x0,
  PagedPool = 0x1,
  NonPagedPoolMustSucceed = 0x2,
  DontUseThisType = 0x3,
  NonPagedPoolCacheAligned = 0x4,
  PagedPoolCacheAligned = 0x5,
  NonPagedPoolCacheAlignedMustS = 0x6,
  MaxPoolType = 0x7,
  NonPagedPoolBase = 0x0,
  NonPagedPoolBaseMustSucceed = 0x2,
  NonPagedPoolBaseCacheAligned = 0x4,
  NonPagedPoolBaseCacheAlignedMustS = 0x6,
  NonPagedPoolSession = 0x20,
  PagedPoolSession = 0x21,
  NonPagedPoolMustSucceedSession = 0x22,
  DontUseThisTypeSession = 0x23,
  NonPagedPoolCacheAlignedSession = 0x24,
  PagedPoolCacheAlignedSession = 0x25,
  NonPagedPoolCacheAlignedMustSSession = 0x26,
  NonPagedPoolNx = 0x200,
  NonPagedPoolNxCacheAligned = 0x204,
  NonPagedPoolSessionNx = 0x220,
};

/* 722 */
struct _DV_HANDLE_ENTRY
{
  void *Value;
};

/* 725 */
struct _DV_HANDLE_TABLE
{
  _DV_HANDLE_ENTRY *Array;
  unsigned int Capacity;
  unsigned int MaximumCapacity;
  unsigned int PoolTag;
  _POOL_TYPE PoolType;
  _DV_HANDLE_ENTRY StaticEmptyTable;
  _RTL_AVL_TABLE *ExtendedTable;
};

/* 726 */
struct __declspec(align(64)) _VMBUS_PIPE
{
  unsigned int Lock;
  _PIPE_STATE State;
  _LIST_ENTRY ReadIrps;
  _LIST_ENTRY WriteIrps;
  _LIST_ENTRY ConnectIrps;
  _PACKET_LIB_CONTEXT PkLibContext;
  VMBCHANNEL__ *Channel;
  _VMB_CHANNEL_CLIENT_STATS *Statistics;
  unsigned __int8 InsertHeaders;
  unsigned __int8 ByteMode;
  unsigned __int8 IndicateMode;
  unsigned __int8 GpaDirectEnabled;
  unsigned int PeekStartOffset;
  unsigned int PeekEndOffset;
  void *ClientContext;
  int (__stdcall *IndicationCallback)(void *, _MDL *, unsigned int, unsigned int, VMBUS_PIPE_INDICATION_CONTEXT__ *);
  void (__stdcall *PauseCallback)(void *);
  void (__stdcall *CloseCallback)(void *);
  _DV_HANDLE_TABLE GpadClientTable;
  unsigned int GpadRangeCount;
  unsigned __int8 InterruptSkipped;
};

/* 212 */
struct _MDL
{
  _MDL *Next;
  __int16 Size;
  __int16 MdlFlags;
  struct _EPROCESS *Process;
  void *MappedSystemVa;
  void *StartVa;
  unsigned int ByteCount;
  unsigned int ByteOffset;
};

/* 720 */
struct VMBCHANNEL__
{
  int unused;
};

/* 713 */
struct VMBUS_PIPE_INDICATION_CONTEXT__
{
  int unused;
};

/* 723 */
struct _RTL_BALANCED_LINKS
{
  _RTL_BALANCED_LINKS *Parent;
  _RTL_BALANCED_LINKS *LeftChild;
  _RTL_BALANCED_LINKS *RightChild;
  char Balance;
  unsigned __int8 Reserved[3];
};

/* 124 */
enum _RTL_GENERIC_COMPARE_RESULTS : __int32
{
  GenericLessThan = 0x0,
  GenericGreaterThan = 0x1,
  GenericEqual = 0x2,
};

/* 724 */
struct _RTL_AVL_TABLE
{
  _RTL_BALANCED_LINKS BalancedRoot;
  void *OrderedPointer;
  unsigned int WhichOrderedElement;
  unsigned int NumberGenericTableElements;
  unsigned int DepthOfTree;
  _RTL_BALANCED_LINKS *RestartKey;
  unsigned int DeleteCount;
  _RTL_GENERIC_COMPARE_RESULTS (__stdcall *CompareRoutine)(_RTL_AVL_TABLE *, void *, void *);
  void *(__stdcall *AllocateRoutine)(_RTL_AVL_TABLE *, unsigned int);
  void (__stdcall *FreeRoutine)(_RTL_AVL_TABLE *, void *);
  void *TableContext;
};

/* 950 */
typedef unsigned __int16 wchar_t;

/* 153 */
struct _UNICODE_STRING
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  wchar_t *Buffer;
};

/* 727 */
const struct _VMBUS_PIPE_ACCEPT_PARAMETERS
{
  _UNICODE_STRING FriendlyName;
};

/* 728 */
struct _VMBUS_CREATE_PIPE_INPUT_PARAMETERS
{
  unsigned __int8 EnumerateDeviceInstance;
  unsigned __int8 OfferAsPipe;
  unsigned __int8 ForceNewChannel;
  unsigned __int8 EnableGpaDirect;
  _GUID InterfaceType;
  _GUID InterfaceInstance;
  unsigned int PipeMode;
  unsigned __int16 MmioMegabytes;
  unsigned __int8 UserDefined[112];
  unsigned __int16 NameCharacterCount;
  wchar_t Name[64];
};

/* 729 */
struct _VMBUS_PIPE_INTERFACE
{
  int (__stdcall *PipeCreate)(unsigned __int8, _VMBUS_PIPE **);
  void (__stdcall *PipeDestroy)(_VMBUS_PIPE *);
  void (__stdcall *PipeSetContext)(_VMBUS_PIPE *, void *);
  void (__stdcall *PipeSetIndicateMode)(_VMBUS_PIPE *, unsigned __int8, int (__stdcall *)(void *, _MDL *, unsigned int, unsigned int, VMBUS_PIPE_INDICATION_CONTEXT__ *));
  void (__stdcall *PipeSetStateChangeCallbacks)(_VMBUS_PIPE *, void (__stdcall *)(void *), void (__stdcall *)(void *));
  void (__stdcall *PipePollForIndication)(_VMBUS_PIPE *);
  int (__stdcall *PipeRead)(_VMBUS_PIPE *, _IRP *);
  int (__stdcall *PipeWrite)(_VMBUS_PIPE *, _IRP *);
  void (__stdcall *PipeCompleteIndication)(_VMBUS_PIPE *, VMBUS_PIPE_INDICATION_CONTEXT__ *);
  int (__stdcall *PipeAccept)(_VMBUS_PIPE *, WDFDEVICE__ *, _FILE_OBJECT *, const _VMBUS_PIPE_ACCEPT_PARAMETERS *);
  void (__stdcall *PipeClose)(_VMBUS_PIPE *);
  int (__stdcall *PipeOffer)(_VMBUS_PIPE *, WDFDEVICE__ *, void *, _GUID *, _VMBUS_CREATE_PIPE_INPUT_PARAMETERS *, unsigned __int8);
  int (__stdcall *PipeConnect)(_VMBUS_PIPE *, _IRP *);
};

/* 215 */
union $A2B3A6EEEF38B0520553866FE66150BF
{
  _IRP *MasterIrp;
  int IrpCount;
  void *SystemBuffer;
};

/* 198 */
union $250F5FE22B4503EFD7D48C86CC7F2167
{
  int Status;
  void *Pointer;
};

/* 199 */
struct _IO_STATUS_BLOCK
{
  $250F5FE22B4503EFD7D48C86CC7F2167 ___u0;
  unsigned int Information;
};

/* 216 */
union $42A2C5739A5687A354D1182359E506CF
{
  void (__stdcall *UserApcRoutine)(void *, _IO_STATUS_BLOCK *, unsigned int);
  void *IssuingProcess;
};

/* 217 */
struct $452DB82506D024CEF2100A65C2CAF4B0
{
  $42A2C5739A5687A354D1182359E506CF ___u0;
  void *UserApcContext;
};

/* 154 */
struct $FAF74743FBE1C8632047CFB668F7028A
{
  unsigned int LowPart;
  int HighPart;
};

/* 155 */
union _LARGE_INTEGER
{
  $FAF74743FBE1C8632047CFB668F7028A __s0;
  $FAF74743FBE1C8632047CFB668F7028A u;
  __int64 QuadPart;
};

/* 218 */
union $1384EF30E58553E49B53342C1A0E366B
{
  $452DB82506D024CEF2100A65C2CAF4B0 AsynchronousParameters;
  _LARGE_INTEGER AllocationSize;
};

/* 219 */
struct __declspec(align(4)) _KDEVICE_QUEUE_ENTRY
{
  _LIST_ENTRY DeviceListEntry;
  unsigned int SortKey;
  unsigned __int8 Inserted;
};

/* 290 */
union $3CABBCB6FEEC15AAC909942577BE829D
{
  _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
  void *DriverContext[4];
};

/* 291 */
union $0D2D7D2AE6BFD640AE0BDAACBE538F0B
{
  _IO_STACK_LOCATION *CurrentStackLocation;
  unsigned int PacketType;
};

/* 292 */
struct $B012D41A6F2E93806321F68B52EA0A0E
{
  $3CABBCB6FEEC15AAC909942577BE829D ___u0;
  struct _ETHREAD *Thread;
  char *AuxiliaryBuffer;
  _LIST_ENTRY ListEntry;
  $0D2D7D2AE6BFD640AE0BDAACBE538F0B ___u4;
  _FILE_OBJECT *OriginalFileObject;
  void *IrpExtension;
};

/* 294 */
struct $9BD04A411A3209D232AAD3953460D7D8
{
  void (__stdcall *KernelRoutine)(_KAPC *, void (__stdcall **)(void *, void *, void *), void **, void **, void **);
  void (__stdcall *RundownRoutine)(_KAPC *);
  void (__stdcall *NormalRoutine)(void *, void *, void *);
};

/* 295 */
union $38DF831B038350204062952869999F68
{
  $9BD04A411A3209D232AAD3953460D7D8 __s0;
  void *Reserved[3];
};

/* 293 */
struct __declspec(align(2)) _KAPC
{
  unsigned __int8 Type;
  unsigned __int8 SpareByte0;
  unsigned __int8 Size;
  unsigned __int8 SpareByte1;
  unsigned int SpareLong0;
  struct _KTHREAD *Thread;
  _LIST_ENTRY ApcListEntry;
  $38DF831B038350204062952869999F68 ___u7;
  void *NormalContext;
  void *SystemArgument1;
  void *SystemArgument2;
  char ApcStateIndex;
  char ApcMode;
  unsigned __int8 Inserted;
};

/* 296 */
union $03ABA4FD81DA0148A5062971BBC2865E
{
  $B012D41A6F2E93806321F68B52EA0A0E Overlay;
  _KAPC Apc;
  void *CompletionKey;
};

/* 214 */
struct _IRP
{
  __int16 Type;
  unsigned __int16 Size;
  _MDL *MdlAddress;
  unsigned int Flags;
  $A2B3A6EEEF38B0520553866FE66150BF AssociatedIrp;
  _LIST_ENTRY ThreadListEntry;
  _IO_STATUS_BLOCK IoStatus;
  char RequestorMode;
  unsigned __int8 PendingReturned;
  char StackCount;
  char CurrentLocation;
  unsigned __int8 Cancel;
  unsigned __int8 CancelIrql;
  char ApcEnvironment;
  unsigned __int8 AllocationFlags;
  _IO_STATUS_BLOCK *UserIosb;
  _KEVENT *UserEvent;
  $1384EF30E58553E49B53342C1A0E366B Overlay;
  void (__stdcall *CancelRoutine)(_DEVICE_OBJECT *, _IRP *);
  void *UserBuffer;
  $03ABA4FD81DA0148A5062971BBC2865E Tail;
};

/* 332 */
struct WDFDEVICE__
{
  int unused;
};

/* 185 */
struct $08481D05807C14C022C64127DBCB0DC5
{
  unsigned __int8 Type;
  unsigned __int8 Signalling;
  unsigned __int8 Size;
  unsigned __int8 Reserved1;
};

/* 186 */
struct $BDD1DEEA9085FB2031C94E38C028AF9F
{
  unsigned __int8 TimerType;
  unsigned __int8 TimerControlFlags;
  unsigned __int8 Hand;
  unsigned __int8 TimerMiscFlags;
};

/* 187 */
struct $1A64267CB6701B751C40AA7938D55A2C
{
  unsigned __int8 Timer2Type;
  unsigned __int8 Absolute : 1;
  unsigned __int8 Wake : 1;
  unsigned __int8 EncodedTolerableDelay : 6;
  unsigned __int8 Timer2Reserved1;
  unsigned __int8 Index : 1;
  unsigned __int8 Processor : 5;
  unsigned __int8 Inserted : 1;
  unsigned __int8 Expired : 1;
};

/* 188 */
struct $DC5C26BDF4D684F12F3A5D4531D3B949
{
  unsigned __int8 QueueType;
  unsigned __int8 Timer2Flags;
  unsigned __int8 QueueSize;
  unsigned __int8 Timer2Reserved2;
};

/* 189 */
struct $82359CCE575330AAB08AF0894BC28AE0
{
  unsigned __int8 ThreadType;
  unsigned __int8 Timer2Inserted : 1;
  unsigned __int8 Timer2Expiring : 1;
  unsigned __int8 Timer2CancelPending : 1;
  unsigned __int8 Timer2SetPending : 1;
  unsigned __int8 Timer2Running : 1;
  unsigned __int8 Timer2Disabled : 1;
  unsigned __int8 Timer2ReservedFlags : 2;
  unsigned __int8 ThreadControlFlags;
  unsigned __int8 QueueReserved;
};

/* 190 */
struct $9300EC2846D44244344338BB8331DF4E
{
  unsigned __int8 MutantType;
  unsigned __int8 QueueControlFlags;
  unsigned __int8 CycleProfiling : 1;
  unsigned __int8 CounterProfiling : 1;
  unsigned __int8 GroupScheduling : 1;
  unsigned __int8 AffinitySet : 1;
  unsigned __int8 Tagged : 1;
  unsigned __int8 EnergyProfiling : 1;
  unsigned __int8 Instrumented : 1;
  unsigned __int8 ThreadReservedControlFlags : 1;
  unsigned __int8 DebugActive;
};

/* 191 */
struct $311232CAD4ECFA502922D62D223D90C0
{
  _BYTE gap0;
  unsigned __int8 Abandoned : 1;
  unsigned __int8 DisableIncrement : 1;
  unsigned __int8 QueueReservedControlFlags : 6;
  unsigned __int8 DpcActive;
  unsigned __int8 MutantReserved;
};

/* 192 */
struct $6287A180EBF0351F83293B36E60E22FF
{
  _BYTE gap0;
  unsigned __int8 ThreadReserved;
};

/* 193 */
struct $4B94A638C9572C40F7312179A2B431F6
{
  _BYTE gap0;
  unsigned __int8 MutantSize;
};

/* 194 */
union $F6E3C34FD505122A5F173F7564F4A24A
{
  volatile int Lock;
  int LockNV;
  $08481D05807C14C022C64127DBCB0DC5 __s2;
  $BDD1DEEA9085FB2031C94E38C028AF9F __s3;
  $1A64267CB6701B751C40AA7938D55A2C __s4;
  $DC5C26BDF4D684F12F3A5D4531D3B949 __s5;
  $82359CCE575330AAB08AF0894BC28AE0 __s6;
  $9300EC2846D44244344338BB8331DF4E __s7;
  $311232CAD4ECFA502922D62D223D90C0 __s8;
  $6287A180EBF0351F83293B36E60E22FF __s9;
  $4B94A638C9572C40F7312179A2B431F6 __s10;
};

/* 195 */
struct _DISPATCHER_HEADER
{
  $F6E3C34FD505122A5F173F7564F4A24A ___u0;
  int SignalState;
  _LIST_ENTRY WaitListHead;
};

/* 196 */
struct _KEVENT
{
  _DISPATCHER_HEADER Header;
};

/* 183 */
struct _FILE_OBJECT
{
  __int16 Type;
  __int16 Size;
  _DEVICE_OBJECT *DeviceObject;
  _VPB *Vpb;
  void *FsContext;
  void *FsContext2;
  _SECTION_OBJECT_POINTERS *SectionObjectPointer;
  void *PrivateCacheMap;
  int FinalStatus;
  _FILE_OBJECT *RelatedFileObject;
  unsigned __int8 LockOperation;
  unsigned __int8 DeletePending;
  unsigned __int8 ReadAccess;
  unsigned __int8 WriteAccess;
  unsigned __int8 DeleteAccess;
  unsigned __int8 SharedRead;
  unsigned __int8 SharedWrite;
  unsigned __int8 SharedDelete;
  unsigned int Flags;
  _UNICODE_STRING FileName;
  _LARGE_INTEGER CurrentByteOffset;
  unsigned int Waiters;
  unsigned int Busy;
  void *LastLock;
  _KEVENT Lock;
  _KEVENT Event;
  _IO_COMPLETION_CONTEXT *CompletionContext;
  unsigned int IrpListLock;
  _LIST_ENTRY IrpList;
  void *FileObjectExtension;
};

/* 301 */
struct $97505CBA18195F10D0AD36BCD9E22724
{
  _LIST_ENTRY DmaWaitEntry;
  unsigned int NumberOfChannels;
  unsigned __int32 SyncCallback : 1;
  unsigned __int32 DmaContext : 1;
  unsigned __int32 ZeroMapRegisters : 1;
  unsigned __int32 Reserved : 29;
};

/* 302 */
union $377AD0F63E99D7027F02F12C8C4B3700
{
  _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
  $97505CBA18195F10D0AD36BCD9E22724 __s1;
};

/* 35 */
enum _IO_ALLOCATION_ACTION : __int32
{
  KeepObject = 0x1,
  DeallocateObject = 0x2,
  DeallocateObjectKeepRegisters = 0x3,
};

/* 303 */
struct _WAIT_CONTEXT_BLOCK
{
  $377AD0F63E99D7027F02F12C8C4B3700 ___u0;
  _IO_ALLOCATION_ACTION (__stdcall *DeviceRoutine)(_DEVICE_OBJECT *, _IRP *, void *, void *);
  void *DeviceContext;
  unsigned int NumberOfMapRegisters;
  void *DeviceObject;
  void *CurrentIrp;
  _KDPC *BufferChainingDpc;
};

/* 304 */
union $9A11C9339CE7AB3F303C610A8EA548D3
{
  _LIST_ENTRY ListEntry;
  _WAIT_CONTEXT_BLOCK Wcb;
};

/* 305 */
struct __declspec(align(4)) _KDEVICE_QUEUE
{
  __int16 Type;
  __int16 Size;
  _LIST_ENTRY DeviceListHead;
  unsigned int Lock;
  unsigned __int8 Busy;
};

/* 299 */
struct $82623AFB470F8517B6D8F9E43441C7E1
{
  unsigned __int8 Type;
  unsigned __int8 Importance;
  volatile unsigned __int16 Number;
};

/* 300 */
union $A412D527029C7A3B26FB30A2DD928377
{
  unsigned int TargetInfoAsUlong;
  $82623AFB470F8517B6D8F9E43441C7E1 __s1;
};

/* 206 */
struct _SINGLE_LIST_ENTRY
{
  _SINGLE_LIST_ENTRY *Next;
};

/* 298 */
struct _KDPC
{
  $A412D527029C7A3B26FB30A2DD928377 ___u0;
  _SINGLE_LIST_ENTRY DpcListEntry;
  unsigned int ProcessorHistory;
  void (__stdcall *DeferredRoutine)(_KDPC *, void *, void *, void *);
  void *DeferredContext;
  void *SystemArgument1;
  void *SystemArgument2;
  void *DpcData;
};

/* 178 */
struct _DEVICE_OBJECT
{
  __int16 Type;
  unsigned __int16 Size;
  int ReferenceCount;
  _DRIVER_OBJECT *DriverObject;
  _DEVICE_OBJECT *NextDevice;
  _DEVICE_OBJECT *AttachedDevice;
  _IRP *CurrentIrp;
  struct _IO_TIMER *Timer;
  unsigned int Flags;
  unsigned int Characteristics;
  _VPB *Vpb;
  void *DeviceExtension;
  unsigned int DeviceType;
  char StackSize;
  $9A11C9339CE7AB3F303C610A8EA548D3 Queue;
  unsigned int AlignmentRequirement;
  _KDEVICE_QUEUE DeviceQueue;
  _KDPC Dpc;
  unsigned int ActiveThreadCount;
  void *SecurityDescriptor;
  _KEVENT DeviceLock;
  unsigned __int16 SectorSize;
  unsigned __int16 Spare1;
  _DEVOBJ_EXTENSION *DeviceObjectExtension;
  void *Reserved;
};

/* 227 */
struct $85656228097947444D63075C9307F915
{
  _IO_SECURITY_CONTEXT *SecurityContext;
  unsigned int Options;
  unsigned __int16 FileAttributes;
  unsigned __int16 ShareAccess;
  unsigned int EaLength;
};

/* 229 */
struct $A64B08CC2B04E7DA9251BE3C26017D11
{
  _IO_SECURITY_CONTEXT *SecurityContext;
  unsigned int Options;
  unsigned __int16 Reserved;
  unsigned __int16 ShareAccess;
  _NAMED_PIPE_CREATE_PARAMETERS *Parameters;
};

/* 231 */
struct $993DB49742943EFDA204F8C45E2F8614
{
  _IO_SECURITY_CONTEXT *SecurityContext;
  unsigned int Options;
  unsigned __int16 Reserved;
  unsigned __int16 ShareAccess;
  _MAILSLOT_CREATE_PARAMETERS *Parameters;
};

/* 232 */
struct $1B63C9B2B0C03011DFE6F91424910616
{
  unsigned int Length;
  unsigned int Key;
  _LARGE_INTEGER ByteOffset;
};

/* 47 */
enum _FILE_INFORMATION_CLASS : __int32
{
  FileDirectoryInformation = 0x1,
  FileFullDirectoryInformation = 0x2,
  FileBothDirectoryInformation = 0x3,
  FileBasicInformation = 0x4,
  FileStandardInformation = 0x5,
  FileInternalInformation = 0x6,
  FileEaInformation = 0x7,
  FileAccessInformation = 0x8,
  FileNameInformation = 0x9,
  FileRenameInformation = 0xA,
  FileLinkInformation = 0xB,
  FileNamesInformation = 0xC,
  FileDispositionInformation = 0xD,
  FilePositionInformation = 0xE,
  FileFullEaInformation = 0xF,
  FileModeInformation = 0x10,
  FileAlignmentInformation = 0x11,
  FileAllInformation = 0x12,
  FileAllocationInformation = 0x13,
  FileEndOfFileInformation = 0x14,
  FileAlternateNameInformation = 0x15,
  FileStreamInformation = 0x16,
  FilePipeInformation = 0x17,
  FilePipeLocalInformation = 0x18,
  FilePipeRemoteInformation = 0x19,
  FileMailslotQueryInformation = 0x1A,
  FileMailslotSetInformation = 0x1B,
  FileCompressionInformation = 0x1C,
  FileObjectIdInformation = 0x1D,
  FileCompletionInformation = 0x1E,
  FileMoveClusterInformation = 0x1F,
  FileQuotaInformation = 0x20,
  FileReparsePointInformation = 0x21,
  FileNetworkOpenInformation = 0x22,
  FileAttributeTagInformation = 0x23,
  FileTrackingInformation = 0x24,
  FileIdBothDirectoryInformation = 0x25,
  FileIdFullDirectoryInformation = 0x26,
  FileValidDataLengthInformation = 0x27,
  FileShortNameInformation = 0x28,
  FileIoCompletionNotificationInformation = 0x29,
  FileIoStatusBlockRangeInformation = 0x2A,
  FileIoPriorityHintInformation = 0x2B,
  FileSfioReserveInformation = 0x2C,
  FileSfioVolumeInformation = 0x2D,
  FileHardLinkInformation = 0x2E,
  FileProcessIdsUsingFileInformation = 0x2F,
  FileNormalizedNameInformation = 0x30,
  FileNetworkPhysicalNameInformation = 0x31,
  FileIdGlobalTxDirectoryInformation = 0x32,
  FileIsRemoteDeviceInformation = 0x33,
  FileUnusedInformation = 0x34,
  FileNumaNodeInformation = 0x35,
  FileStandardLinkInformation = 0x36,
  FileRemoteProtocolInformation = 0x37,
  FileRenameInformationBypassAccessCheck = 0x38,
  FileLinkInformationBypassAccessCheck = 0x39,
  FileVolumeNameInformation = 0x3A,
  FileIdInformation = 0x3B,
  FileIdExtdDirectoryInformation = 0x3C,
  FileReplaceCompletionInformation = 0x3D,
  FileHardLinkFullIdInformation = 0x3E,
  FileIdExtdBothDirectoryInformation = 0x3F,
  FileMaximumInformation = 0x40,
};

/* 233 */
struct $4B20666CC00A367BEDBCFFBC23E432D1
{
  unsigned int Length;
  _UNICODE_STRING *FileName;
  _FILE_INFORMATION_CLASS FileInformationClass;
  unsigned int FileIndex;
};

/* 234 */
struct $50A7D1BFBD4B9BBEBCBBE3D92FEB6A61
{
  unsigned int Length;
  unsigned int CompletionFilter;
};

/* 235 */
struct $1C4A41907101204B2BA923D3CB031A2A
{
  unsigned int Length;
  _FILE_INFORMATION_CLASS FileInformationClass;
};

/* 236 */
struct $BBD6C80A82148A7CAD5B218A5A41C1D9
{
  unsigned __int8 ReplaceIfExists;
  unsigned __int8 AdvanceOnly;
};

/* 237 */
union $EF12DCC76742A6F26A6A6A98D9AFA1FC
{
  $BBD6C80A82148A7CAD5B218A5A41C1D9 __s0;
  unsigned int ClusterCount;
  void *DeleteHandle;
};

/* 238 */
struct $056B4C08FD195C8F9685B3EE586A44FB
{
  unsigned int Length;
  _FILE_INFORMATION_CLASS FileInformationClass;
  _FILE_OBJECT *FileObject;
  $EF12DCC76742A6F26A6A6A98D9AFA1FC ___u3;
};

/* 40 */
enum _FSINFOCLASS : __int32
{
  FileFsVolumeInformation = 0x1,
  FileFsLabelInformation = 0x2,
  FileFsSizeInformation = 0x3,
  FileFsDeviceInformation = 0x4,
  FileFsAttributeInformation = 0x5,
  FileFsControlInformation = 0x6,
  FileFsFullSizeInformation = 0x7,
  FileFsObjectIdInformation = 0x8,
  FileFsDriverPathInformation = 0x9,
  FileFsVolumeFlagsInformation = 0xA,
  FileFsSectorSizeInformation = 0xB,
  FileFsDataCopyInformation = 0xC,
  FileFsMetadataSizeInformation = 0xD,
  FileFsMaximumInformation = 0xE,
};

/* 239 */
struct $074E5C494B75D5ABB8B4E15113411E3B
{
  unsigned int Length;
  _FSINFOCLASS FsInformationClass;
};

/* 240 */
struct $1452ECD7C6E5AB3C058EED8909EEC64B
{
  unsigned int OutputBufferLength;
  unsigned int InputBufferLength;
  unsigned int FsControlCode;
  void *Type3InputBuffer;
};

/* 241 */
struct $28EB05417A0B0BCEDAEA39746083AAD3
{
  _LARGE_INTEGER *Length;
  unsigned int Key;
  _LARGE_INTEGER ByteOffset;
};

/* 242 */
struct $343716E60DEC8CEA3C236115305CA9A5
{
  unsigned int OutputBufferLength;
  unsigned int InputBufferLength;
  unsigned int IoControlCode;
  void *Type3InputBuffer;
};

/* 243 */
struct $79FAFD50642EF9FCAC6F48CCDD5826D7
{
  unsigned int SecurityInformation;
  unsigned int Length;
};

/* 244 */
struct $29E784017BF8D630C3CED492840B3F1E
{
  unsigned int SecurityInformation;
  void *SecurityDescriptor;
};

/* 245 */
struct $A9B3F0698D928FCC7E9BD4A0424B859B
{
  _VPB *Vpb;
  _DEVICE_OBJECT *DeviceObject;
};

/* 246 */
struct $B2B4984C7002DD41520623255E2F9497
{
  struct _SCSI_REQUEST_BLOCK *Srb;
};

/* 59 */
enum _DEVICE_RELATION_TYPE : __int32
{
  BusRelations = 0x0,
  EjectionRelations = 0x1,
  PowerRelations = 0x2,
  RemovalRelations = 0x3,
  TargetDeviceRelation = 0x4,
  SingleBusRelations = 0x5,
  TransportRelations = 0x6,
};

/* 247 */
struct $DD666F4480444DE3EB7B8E73EE0E4BC1
{
  _DEVICE_RELATION_TYPE Type;
};

/* 249 */
struct $246F8C59B0073D246D3D2A68DE10DAF1
{
  const _GUID *InterfaceType;
  unsigned __int16 Size;
  unsigned __int16 Version;
  _INTERFACE *Interface;
  void *InterfaceSpecificData;
};

/* 251 */
struct $7F9142C2EC18214765E302040C471ED8
{
  _DEVICE_CAPABILITIES *Capabilities;
};

/* 267 */
struct $99779177F4A578968725C2F42802AAB6
{
  _IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
};

/* 268 */
struct $5E4425892CB91929A7D567B5DA0A3F92
{
  unsigned int WhichSpace;
  void *Buffer;
  unsigned int Offset;
  unsigned int Length;
};

/* 269 */
struct $B367FCCFB95D7087158A479FE9C2D0D7
{
  unsigned __int8 Lock;
};

/* 67 */
enum BUS_QUERY_ID_TYPE : __int32
{
  BusQueryDeviceID = 0x0,
  BusQueryHardwareIDs = 0x1,
  BusQueryCompatibleIDs = 0x2,
  BusQueryInstanceID = 0x3,
  BusQueryDeviceSerialNumber = 0x4,
  BusQueryContainerID = 0x5,
};

/* 270 */
struct $52124CC28962514F8D2C971B61C58BA3
{
  BUS_QUERY_ID_TYPE IdType;
};

/* 58 */
enum DEVICE_TEXT_TYPE : __int32
{
  DeviceTextDescription = 0x0,
  DeviceTextLocationInformation = 0x1,
};

/* 271 */
struct $3FFB90D00B3582C74E3DCA267373351F
{
  DEVICE_TEXT_TYPE DeviceTextType;
  unsigned int LocaleId;
};

/* 49 */
enum _DEVICE_USAGE_NOTIFICATION_TYPE : __int32
{
  DeviceUsageTypeUndefined = 0x0,
  DeviceUsageTypePaging = 0x1,
  DeviceUsageTypeHibernation = 0x2,
  DeviceUsageTypeDumpFile = 0x3,
  DeviceUsageTypeBoot = 0x4,
  DeviceUsageTypePostDisplay = 0x5,
};

/* 272 */
struct $D76AB4AA9822D25EA2C85F666B4412C6
{
  unsigned __int8 InPath;
  unsigned __int8 Reserved[3];
  _DEVICE_USAGE_NOTIFICATION_TYPE Type;
};

/* 33 */
enum _SYSTEM_POWER_STATE : __int32
{
  PowerSystemUnspecified = 0x0,
  PowerSystemWorking = 0x1,
  PowerSystemSleeping1 = 0x2,
  PowerSystemSleeping2 = 0x3,
  PowerSystemSleeping3 = 0x4,
  PowerSystemHibernate = 0x5,
  PowerSystemShutdown = 0x6,
  PowerSystemMaximum = 0x7,
};

/* 273 */
struct $1E08BE435DE5F072445FF2D4B2FA847D
{
  _SYSTEM_POWER_STATE PowerState;
};

/* 275 */
struct $A8268D08D27F1ABB71B9602878082D11
{
  _POWER_SEQUENCE *PowerSequence;
};

/* 276 */
struct $76514DB155979F88E47E6F460A9859AB
{
  unsigned __int32 Reserved1 : 8;
  unsigned __int32 TargetSystemState : 4;
  unsigned __int32 EffectiveSystemState : 4;
  unsigned __int32 CurrentSystemState : 4;
  unsigned __int32 IgnoreHibernationPath : 1;
  unsigned __int32 PseudoTransition : 1;
  unsigned __int32 Reserved2 : 10;
};

/* 277 */
union $F087A368F1D9A9FF618E5B2200F423F2
{
  $76514DB155979F88E47E6F460A9859AB __s0;
  unsigned int ContextAsUlong;
};

/* 278 */
struct _SYSTEM_POWER_STATE_CONTEXT
{
  $F087A368F1D9A9FF618E5B2200F423F2 ___u0;
};

/* 280 */
union $4050728E4E96C7CBCA9B999DF8159ED5
{
  unsigned int SystemContext;
  _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
};

/* 39 */
enum _POWER_STATE_TYPE : __int32
{
  SystemPowerState = 0x0,
  DevicePowerState = 0x1,
};

/* 7 */
enum _DEVICE_POWER_STATE : __int32
{
  PowerDeviceUnspecified = 0x0,
  PowerDeviceD0 = 0x1,
  PowerDeviceD1 = 0x2,
  PowerDeviceD2 = 0x3,
  PowerDeviceD3 = 0x4,
  PowerDeviceMaximum = 0x5,
};

/* 279 */
union _POWER_STATE
{
  _SYSTEM_POWER_STATE SystemState;
  _DEVICE_POWER_STATE DeviceState;
};

/* 77 */
enum POWER_ACTION : __int32
{
  PowerActionNone = 0x0,
  PowerActionReserved = 0x1,
  PowerActionSleep = 0x2,
  PowerActionHibernate = 0x3,
  PowerActionShutdown = 0x4,
  PowerActionShutdownReset = 0x5,
  PowerActionShutdownOff = 0x6,
  PowerActionWarmEject = 0x7,
  PowerActionDisplayOff = 0x8,
};

/* 281 */
struct $B482ADFB17C6EE3C6A5BB1D7488DE6C5
{
  $4050728E4E96C7CBCA9B999DF8159ED5 ___u0;
  _POWER_STATE_TYPE Type;
  _POWER_STATE State;
  POWER_ACTION ShutdownType;
};

/* 285 */
struct $40AD370A762133700260D890070CD707
{
  _CM_RESOURCE_LIST *AllocatedResources;
  _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
};

/* 286 */
struct $27D1A893733DBE62F2FCC36974CB79FA
{
  unsigned int ProviderId;
  void *DataPath;
  unsigned int BufferSize;
  void *Buffer;
};

/* 287 */
struct $228F32E73A128818A25FF1959272C294
{
  void *Argument1;
  void *Argument2;
  void *Argument3;
  void *Argument4;
};

/* 288 */
union $31C1FC065E6570E7C55AAF2A60CDA32F
{
  $85656228097947444D63075C9307F915 Create;
  $A64B08CC2B04E7DA9251BE3C26017D11 CreatePipe;
  $993DB49742943EFDA204F8C45E2F8614 CreateMailslot;
  $1B63C9B2B0C03011DFE6F91424910616 Read;
  $1B63C9B2B0C03011DFE6F91424910616 Write;
  $4B20666CC00A367BEDBCFFBC23E432D1 QueryDirectory;
  $50A7D1BFBD4B9BBEBCBBE3D92FEB6A61 NotifyDirectory;
  $1C4A41907101204B2BA923D3CB031A2A QueryFile;
  $056B4C08FD195C8F9685B3EE586A44FB SetFile;
  $074E5C494B75D5ABB8B4E15113411E3B QueryVolume;
  $1452ECD7C6E5AB3C058EED8909EEC64B FileSystemControl;
  $28EB05417A0B0BCEDAEA39746083AAD3 LockControl;
  $343716E60DEC8CEA3C236115305CA9A5 DeviceIoControl;
  $79FAFD50642EF9FCAC6F48CCDD5826D7 QuerySecurity;
  $29E784017BF8D630C3CED492840B3F1E SetSecurity;
  $A9B3F0698D928FCC7E9BD4A0424B859B MountVolume;
  $A9B3F0698D928FCC7E9BD4A0424B859B VerifyVolume;
  $B2B4984C7002DD41520623255E2F9497 Scsi;
  $DD666F4480444DE3EB7B8E73EE0E4BC1 QueryDeviceRelations;
  $246F8C59B0073D246D3D2A68DE10DAF1 QueryInterface;
  $7F9142C2EC18214765E302040C471ED8 DeviceCapabilities;
  $99779177F4A578968725C2F42802AAB6 FilterResourceRequirements;
  $5E4425892CB91929A7D567B5DA0A3F92 ReadWriteConfig;
  $B367FCCFB95D7087158A479FE9C2D0D7 SetLock;
  $52124CC28962514F8D2C971B61C58BA3 QueryId;
  $3FFB90D00B3582C74E3DCA267373351F QueryDeviceText;
  $D76AB4AA9822D25EA2C85F666B4412C6 UsageNotification;
  $1E08BE435DE5F072445FF2D4B2FA847D WaitWake;
  $A8268D08D27F1ABB71B9602878082D11 PowerSequence;
  $B482ADFB17C6EE3C6A5BB1D7488DE6C5 Power;
  $40AD370A762133700260D890070CD707 StartDevice;
  $27D1A893733DBE62F2FCC36974CB79FA WMI;
  $228F32E73A128818A25FF1959272C294 Others;
};

/* 289 */
struct __unaligned __declspec(align(4)) _IO_STACK_LOCATION
{
  unsigned __int8 MajorFunction;
  unsigned __int8 MinorFunction;
  unsigned __int8 Flags;
  unsigned __int8 Control;
  $31C1FC065E6570E7C55AAF2A60CDA32F Parameters;
  _DEVICE_OBJECT *DeviceObject;
  _FILE_OBJECT *FileObject;
  int (__stdcall *CompletionRoutine)(_DEVICE_OBJECT *, _IRP *, void *);
  void *Context;
};

/* 181 */
struct _VPB
{
  __int16 Type;
  __int16 Size;
  unsigned __int16 Flags;
  unsigned __int16 VolumeLabelLength;
  _DEVICE_OBJECT *DeviceObject;
  _DEVICE_OBJECT *RealDevice;
  unsigned int SerialNumber;
  unsigned int ReferenceCount;
  wchar_t VolumeLabel[32];
};

/* 182 */
struct _SECTION_OBJECT_POINTERS
{
  void *DataSectionObject;
  void *SharedCacheMap;
  void *ImageSectionObject;
};

/* 197 */
struct _IO_COMPLETION_CONTEXT
{
  void *Port;
  void *Key;
};

/* 179 */
struct _DRIVER_OBJECT
{
  __int16 Type;
  __int16 Size;
  _DEVICE_OBJECT *DeviceObject;
  unsigned int Flags;
  void *DriverStart;
  unsigned int DriverSize;
  void *DriverSection;
  _DRIVER_EXTENSION *DriverExtension;
  _UNICODE_STRING DriverName;
  _UNICODE_STRING *HardwareDatabase;
  _FAST_IO_DISPATCH *FastIoDispatch;
  int (__stdcall *DriverInit)(_DRIVER_OBJECT *, _UNICODE_STRING *);
  void (__stdcall *DriverStartIo)(_DEVICE_OBJECT *, _IRP *);
  void (__stdcall *DriverUnload)(_DRIVER_OBJECT *);
  int (__stdcall *MajorFunction[28])(_DEVICE_OBJECT *, _IRP *);
};

/* 306 */
struct _DEVOBJ_EXTENSION
{
  __int16 Type;
  unsigned __int16 Size;
  _DEVICE_OBJECT *DeviceObject;
  unsigned int PowerFlags;
  struct _DEVICE_OBJECT_POWER_EXTENSION *Dope;
  unsigned int ExtensionFlags;
  void *DeviceNode;
  _DEVICE_OBJECT *AttachedTo;
  int StartIoCount;
  int StartIoKey;
  unsigned int StartIoFlags;
  _VPB *Vpb;
  void *DependencyNode;
  void *InterruptContext;
  void *VerifierContext;
};

/* 226 */
struct _IO_SECURITY_CONTEXT
{
  _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
  _ACCESS_STATE *AccessState;
  unsigned int DesiredAccess;
  unsigned int FullCreateOptions;
};

/* 228 */
struct __declspec(align(8)) _NAMED_PIPE_CREATE_PARAMETERS
{
  unsigned int NamedPipeType;
  unsigned int ReadMode;
  unsigned int CompletionMode;
  unsigned int MaximumInstances;
  unsigned int InboundQuota;
  unsigned int OutboundQuota;
  _LARGE_INTEGER DefaultTimeout;
  unsigned __int8 TimeoutSpecified;
};

/* 230 */
struct __declspec(align(8)) _MAILSLOT_CREATE_PARAMETERS
{
  unsigned int MailslotQuota;
  unsigned int MaximumMessageSize;
  _LARGE_INTEGER ReadTimeout;
  unsigned __int8 TimeoutSpecified;
};

/* 248 */
struct _INTERFACE
{
  unsigned __int16 Size;
  unsigned __int16 Version;
  void *Context;
  void (__stdcall *InterfaceReference)(void *);
  void (__stdcall *InterfaceDereference)(void *);
};

/* 250 */
struct _DEVICE_CAPABILITIES
{
  unsigned __int16 Size;
  unsigned __int16 Version;
  unsigned __int32 DeviceD1 : 1;
  unsigned __int32 DeviceD2 : 1;
  unsigned __int32 LockSupported : 1;
  unsigned __int32 EjectSupported : 1;
  unsigned __int32 Removable : 1;
  unsigned __int32 DockDevice : 1;
  unsigned __int32 UniqueID : 1;
  unsigned __int32 SilentInstall : 1;
  unsigned __int32 RawDeviceOK : 1;
  unsigned __int32 SurpriseRemovalOK : 1;
  unsigned __int32 WakeFromD0 : 1;
  unsigned __int32 WakeFromD1 : 1;
  unsigned __int32 WakeFromD2 : 1;
  unsigned __int32 WakeFromD3 : 1;
  unsigned __int32 HardwareDisabled : 1;
  unsigned __int32 NonDynamic : 1;
  unsigned __int32 WarmEjectSupported : 1;
  unsigned __int32 NoDisplayInUI : 1;
  unsigned __int32 Reserved1 : 1;
  unsigned __int32 WakeFromInterrupt : 1;
  unsigned __int32 Reserved : 12;
  unsigned int Address;
  unsigned int UINumber;
  _DEVICE_POWER_STATE DeviceState[7];
  _SYSTEM_POWER_STATE SystemWake;
  _DEVICE_POWER_STATE DeviceWake;
  unsigned int D1Latency;
  unsigned int D2Latency;
  unsigned int D3Latency;
};

/* 38 */
enum _INTERFACE_TYPE : __int32
{
  InterfaceTypeUndefined = 0xFFFFFFFF,
  Internal = 0x0,
  Isa = 0x1,
  Eisa = 0x2,
  MicroChannel = 0x3,
  TurboChannel = 0x4,
  PCIBus = 0x5,
  VMEBus = 0x6,
  NuBus = 0x7,
  PCMCIABus = 0x8,
  CBus = 0x9,
  MPIBus = 0xA,
  MPSABus = 0xB,
  ProcessorInternal = 0xC,
  InternalPowerBus = 0xD,
  PNPISABus = 0xE,
  PNPBus = 0xF,
  Vmcs = 0x10,
  ACPIBus = 0x11,
  MaximumInterfaceType = 0x12,
};

/* 252 */
struct $B9B21C8D98BA07FD6D8EDDECBDBA19E1
{
  unsigned int Length;
  unsigned int Alignment;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 63 */
enum _IRQ_PRIORITY : __int32
{
  IrqPriorityUndefined = 0x0,
  IrqPriorityLow = 0x1,
  IrqPriorityNormal = 0x2,
  IrqPriorityHigh = 0x3,
};

/* 253 */
struct $1D455F5EC1586F3C1D4C93ECB95400BD
{
  unsigned int MinimumVector;
  unsigned int MaximumVector;
  unsigned __int16 AffinityPolicy;
  unsigned __int16 Group;
  _IRQ_PRIORITY PriorityPolicy;
  unsigned int TargetedProcessors;
};

/* 254 */
struct $290D34FD7868E94AFEC0383C08CB9B28
{
  unsigned int MinimumChannel;
  unsigned int MaximumChannel;
};

/* 255 */
struct $66D8BAE383F9288207BB026A64AFF51A
{
  unsigned int RequestLine;
  unsigned int Reserved;
  unsigned int Channel;
  unsigned int TransferWidth;
};

/* 256 */
struct $B14DB811EDFC1214B110A98B000FF49B
{
  unsigned int Data[3];
};

/* 257 */
struct $CF7D779FCF8501AF42168A39ACA3AE76
{
  unsigned int Length;
  unsigned int MinBusNumber;
  unsigned int MaxBusNumber;
  unsigned int Reserved;
};

/* 258 */
struct $5D61DD2957AFDEE7ED67BD2EDF2BEA99
{
  unsigned int Priority;
  unsigned int Reserved1;
  unsigned int Reserved2;
};

/* 259 */
struct $F5BC1B4B35939C563DF1C7206FE41E5D
{
  unsigned int Length40;
  unsigned int Alignment40;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 260 */
struct $712C6DD20805479B48408FA324A4CD5D
{
  unsigned int Length48;
  unsigned int Alignment48;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 261 */
struct $5EB7BF7CA8AC26FC9BAC29FA9E55F14F
{
  unsigned int Length64;
  unsigned int Alignment64;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 262 */
struct $EDAC022CDA01C704ED739E663C6F28A2
{
  unsigned __int8 Class;
  unsigned __int8 Type;
  unsigned __int8 Reserved1;
  unsigned __int8 Reserved2;
  unsigned int IdLowPart;
  unsigned int IdHighPart;
};

/* 263 */
union $4E7CC66399A63ACA82B57E61AD405B37
{
  $B9B21C8D98BA07FD6D8EDDECBDBA19E1 Port;
  $B9B21C8D98BA07FD6D8EDDECBDBA19E1 Memory;
  $1D455F5EC1586F3C1D4C93ECB95400BD Interrupt;
  $290D34FD7868E94AFEC0383C08CB9B28 Dma;
  $66D8BAE383F9288207BB026A64AFF51A DmaV3;
  $B9B21C8D98BA07FD6D8EDDECBDBA19E1 Generic;
  $B14DB811EDFC1214B110A98B000FF49B DevicePrivate;
  $CF7D779FCF8501AF42168A39ACA3AE76 BusNumber;
  $5D61DD2957AFDEE7ED67BD2EDF2BEA99 ConfigData;
  $F5BC1B4B35939C563DF1C7206FE41E5D Memory40;
  $712C6DD20805479B48408FA324A4CD5D Memory48;
  $5EB7BF7CA8AC26FC9BAC29FA9E55F14F Memory64;
  $EDAC022CDA01C704ED739E663C6F28A2 Connection;
};

/* 264 */
struct _IO_RESOURCE_DESCRIPTOR
{
  unsigned __int8 Option;
  unsigned __int8 Type;
  unsigned __int8 ShareDisposition;
  unsigned __int8 Spare1;
  unsigned __int16 Flags;
  unsigned __int16 Spare2;
  $4E7CC66399A63ACA82B57E61AD405B37 u;
};

/* 265 */
struct _IO_RESOURCE_LIST
{
  unsigned __int16 Version;
  unsigned __int16 Revision;
  unsigned int Count;
  _IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

/* 266 */
struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  unsigned int ListSize;
  _INTERFACE_TYPE InterfaceType;
  unsigned int BusNumber;
  unsigned int SlotNumber;
  unsigned int Reserved[3];
  unsigned int AlternativeLists;
  _IO_RESOURCE_LIST List[1];
};

/* 274 */
struct _POWER_SEQUENCE
{
  unsigned int SequenceD1;
  unsigned int SequenceD2;
  unsigned int SequenceD3;
};

/* 156 */
struct __unaligned __declspec(align(4)) _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Generic>
{
  _LARGE_INTEGER Start;
  unsigned int Length;
};

/* 157 */
struct __unaligned __declspec(align(4)) _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Port>
{
  _LARGE_INTEGER Start;
  unsigned int Length;
};

/* 158 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Interrupt>
{
  unsigned int Level;
  unsigned int Vector;
  unsigned int Affinity;
};

/* 159 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_MessageInterrupt>::<unnamed_tag>::<unnamed_type_Raw>
{
  unsigned __int16 Reserved;
  unsigned __int16 MessageCount;
  unsigned int Vector;
  unsigned int Affinity;
};

/* 160 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_MessageInterrupt>::<unnamed_tag>::<unnamed_type_Translated>
{
  unsigned int Level;
  unsigned int Vector;
  unsigned int Affinity;
};

/* 161 */
union $F71B05116D579473DF2CAAE8F095BB51
{
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_MessageInterrupt>::<unnamed_tag>::<unnamed_type_Raw> Raw;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_MessageInterrupt>::<unnamed_tag>::<unnamed_type_Translated> Translated;
};

/* 162 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_MessageInterrupt>
{
  $F71B05116D579473DF2CAAE8F095BB51 ___u0;
};

/* 163 */
struct __unaligned __declspec(align(4)) _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Memory>
{
  _LARGE_INTEGER Start;
  unsigned int Length;
};

/* 164 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Dma>
{
  unsigned int Channel;
  unsigned int Port;
  unsigned int Reserved1;
};

/* 165 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_DmaV3>
{
  unsigned int Channel;
  unsigned int RequestLine;
  unsigned __int8 TransferWidth;
  unsigned __int8 Reserved1;
  unsigned __int8 Reserved2;
  unsigned __int8 Reserved3;
};

/* 166 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_DevicePrivate>
{
  unsigned int Data[3];
};

/* 167 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_BusNumber>
{
  unsigned int Start;
  unsigned int Length;
  unsigned int Reserved;
};

/* 168 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_DeviceSpecificData>
{
  unsigned int DataSize;
  unsigned int Reserved1;
  unsigned int Reserved2;
};

/* 169 */
struct __unaligned __declspec(align(4)) _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Memory40>
{
  _LARGE_INTEGER Start;
  unsigned int Length40;
};

/* 170 */
struct __unaligned __declspec(align(4)) _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Memory48>
{
  _LARGE_INTEGER Start;
  unsigned int Length48;
};

/* 171 */
struct __unaligned __declspec(align(4)) _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Memory64>
{
  _LARGE_INTEGER Start;
  unsigned int Length64;
};

/* 172 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Connection>
{
  unsigned __int8 Class;
  unsigned __int8 Type;
  unsigned __int8 Reserved1;
  unsigned __int8 Reserved2;
  unsigned int IdLowPart;
  unsigned int IdHighPart;
};

/* 173 */
union _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>
{
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Generic> Generic;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Port> Port;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Interrupt> Interrupt;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_MessageInterrupt> MessageInterrupt;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Memory> Memory;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Dma> Dma;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_DmaV3> DmaV3;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_DevicePrivate> DevicePrivate;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_BusNumber> BusNumber;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_DeviceSpecificData> DeviceSpecificData;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Memory40> Memory40;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Memory48> Memory48;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Memory64> Memory64;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u>::<unnamed_type_Connection> Connection;
};

/* 174 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  unsigned __int8 Type;
  unsigned __int8 ShareDisposition;
  unsigned __int16 Flags;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR::<unnamed_type_u> u;
};

/* 282 */
struct _CM_PARTIAL_RESOURCE_LIST
{
  unsigned __int16 Version;
  unsigned __int16 Revision;
  unsigned int Count;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

/* 283 */
struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  _INTERFACE_TYPE InterfaceType;
  unsigned int BusNumber;
  _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

/* 284 */
struct _CM_RESOURCE_LIST
{
  unsigned int Count;
  _CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

/* 180 */
struct _DRIVER_EXTENSION
{
  _DRIVER_OBJECT *DriverObject;
  int (__stdcall *AddDevice)(_DRIVER_OBJECT *, _DEVICE_OBJECT *);
  unsigned int Count;
  _UNICODE_STRING ServiceKeyName;
};

/* 297 */
struct _FAST_IO_DISPATCH
{
  unsigned int SizeOfFastIoDispatch;
  unsigned __int8 (__stdcall *FastIoCheckIfPossible)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned __int8, unsigned int, unsigned __int8, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoRead)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned __int8, unsigned int, void *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoWrite)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned __int8, unsigned int, void *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoQueryBasicInfo)(_FILE_OBJECT *, unsigned __int8, _FILE_BASIC_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoQueryStandardInfo)(_FILE_OBJECT *, unsigned __int8, _FILE_STANDARD_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoLock)(_FILE_OBJECT *, _LARGE_INTEGER *, _LARGE_INTEGER *, struct _EPROCESS *, unsigned int, unsigned __int8, unsigned __int8, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoUnlockSingle)(_FILE_OBJECT *, _LARGE_INTEGER *, _LARGE_INTEGER *, struct _EPROCESS *, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoUnlockAll)(_FILE_OBJECT *, struct _EPROCESS *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoUnlockAllByKey)(_FILE_OBJECT *, void *, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoDeviceControl)(_FILE_OBJECT *, unsigned __int8, void *, unsigned int, void *, unsigned int, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  void (__stdcall *AcquireFileForNtCreateSection)(_FILE_OBJECT *);
  void (__stdcall *ReleaseFileForNtCreateSection)(_FILE_OBJECT *);
  void (__stdcall *FastIoDetachDevice)(_DEVICE_OBJECT *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoQueryNetworkOpenInfo)(_FILE_OBJECT *, unsigned __int8, _FILE_NETWORK_OPEN_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  int (__stdcall *AcquireForModWrite)(_FILE_OBJECT *, _LARGE_INTEGER *, _ERESOURCE **, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *MdlRead)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, _MDL **, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *MdlReadComplete)(_FILE_OBJECT *, _MDL *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *PrepareMdlWrite)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, _MDL **, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *MdlWriteComplete)(_FILE_OBJECT *, _LARGE_INTEGER *, _MDL *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoReadCompressed)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, void *, _MDL **, _IO_STATUS_BLOCK *, _COMPRESSED_DATA_INFO *, unsigned int, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoWriteCompressed)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, void *, _MDL **, _IO_STATUS_BLOCK *, _COMPRESSED_DATA_INFO *, unsigned int, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *MdlReadCompleteCompressed)(_FILE_OBJECT *, _MDL *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *MdlWriteCompleteCompressed)(_FILE_OBJECT *, _LARGE_INTEGER *, _MDL *, _DEVICE_OBJECT *);
  unsigned __int8 (__stdcall *FastIoQueryOpen)(_IRP *, _FILE_NETWORK_OPEN_INFORMATION *, _DEVICE_OBJECT *);
  int (__stdcall *ReleaseForModWrite)(_FILE_OBJECT *, _ERESOURCE *, _DEVICE_OBJECT *);
  int (__stdcall *AcquireForCcFlush)(_FILE_OBJECT *, _DEVICE_OBJECT *);
  int (__stdcall *ReleaseForCcFlush)(_FILE_OBJECT *, _DEVICE_OBJECT *);
};

/* 36 */
enum _SECURITY_IMPERSONATION_LEVEL : __int32
{
  SecurityAnonymous = 0x0,
  SecurityIdentification = 0x1,
  SecurityImpersonation = 0x2,
  SecurityDelegation = 0x3,
};

/* 220 */
struct __declspec(align(4)) _SECURITY_QUALITY_OF_SERVICE
{
  unsigned int Length;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  unsigned __int8 ContextTrackingMode;
  unsigned __int8 EffectiveOnly;
};

/* 175 */
struct _LUID
{
  unsigned int LowPart;
  int HighPart;
};

/* 221 */
struct _SECURITY_SUBJECT_CONTEXT
{
  void *ClientToken;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  void *PrimaryToken;
  void *ProcessAuditId;
};

/* 176 */
struct _LUID_AND_ATTRIBUTES
{
  _LUID Luid;
  unsigned int Attributes;
};

/* 222 */
struct _INITIAL_PRIVILEGE_SET
{
  unsigned int PrivilegeCount;
  unsigned int Control;
  _LUID_AND_ATTRIBUTES Privilege[3];
};

/* 223 */
struct _PRIVILEGE_SET
{
  unsigned int PrivilegeCount;
  unsigned int Control;
  _LUID_AND_ATTRIBUTES Privilege[1];
};

/* 224 */
union $6C9D3DB563CFBBEB2420BEEB1F3F9F93
{
  _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
  _PRIVILEGE_SET PrivilegeSet;
};

/* 225 */
struct _ACCESS_STATE
{
  _LUID OperationID;
  unsigned __int8 SecurityEvaluated;
  unsigned __int8 GenerateAudit;
  unsigned __int8 GenerateOnClose;
  unsigned __int8 PrivilegesAllocated;
  unsigned int Flags;
  unsigned int RemainingDesiredAccess;
  unsigned int PreviouslyGrantedAccess;
  unsigned int OriginalDesiredAccess;
  _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  void *SecurityDescriptor;
  void *AuxData;
  $6C9D3DB563CFBBEB2420BEEB1F3F9F93 Privileges;
  unsigned __int8 AuditPrivileges;
  _UNICODE_STRING ObjectName;
  _UNICODE_STRING ObjectTypeName;
};

/* 200 */
struct __declspec(align(8)) _FILE_BASIC_INFORMATION
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  unsigned int FileAttributes;
};

/* 201 */
struct __declspec(align(4)) _FILE_STANDARD_INFORMATION
{
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  unsigned int NumberOfLinks;
  unsigned __int8 DeletePending;
  unsigned __int8 Directory;
};

/* 202 */
struct __declspec(align(8)) _FILE_NETWORK_OPEN_INFORMATION
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  unsigned int FileAttributes;
};

/* 208 */
struct $9959C6898638794B7A02F04E7F980F81
{
  unsigned __int8 ReservedLowFlags;
  unsigned __int8 WaiterPriority;
};

/* 209 */
union $348FCF74E5324B499717771328EA279F
{
  unsigned __int16 Flag;
  $9959C6898638794B7A02F04E7F980F81 __s1;
};

/* 207 */
struct _KWAIT_CHAIN
{
  _SINGLE_LIST_ENTRY Head;
};

/* 203 */
struct $E71B718CD8428E7C8AA4A0868051E710
{
  unsigned __int32 IoPriorityBoosted : 1;
  unsigned __int32 OwnerReferenced : 1;
  unsigned __int32 IoQoSPriorityBoosted : 1;
  unsigned __int32 OwnerCount : 29;
};

/* 204 */
union $36D06487CD455D31F59F4B25606B1B53
{
  $E71B718CD8428E7C8AA4A0868051E710 __s0;
  unsigned int TableSize;
};

/* 205 */
struct _OWNER_ENTRY
{
  unsigned int OwnerThread;
  $36D06487CD455D31F59F4B25606B1B53 ___u1;
};

/* 210 */
union $B8D4EB9E6E3D1A926634FE9A5064A2BB
{
  void *Address;
  unsigned int CreatorBackTraceIndex;
};

/* 211 */
struct _ERESOURCE
{
  _LIST_ENTRY SystemResourcesList;
  _OWNER_ENTRY *OwnerTable;
  __int16 ActiveCount;
  $348FCF74E5324B499717771328EA279F ___u3;
  _KWAIT_CHAIN SharedWaiters;
  _KEVENT *ExclusiveWaiters;
  _OWNER_ENTRY OwnerEntry;
  unsigned int ActiveEntries;
  unsigned int ContentionCount;
  unsigned int NumberOfSharedWaiters;
  unsigned int NumberOfExclusiveWaiters;
  $B8D4EB9E6E3D1A926634FE9A5064A2BB ___u11;
  unsigned int SpinLock;
};

/* 213 */
struct _COMPRESSED_DATA_INFO
{
  unsigned __int16 CompressionFormatAndEngine;
  unsigned __int8 CompressionUnitShift;
  unsigned __int8 ChunkShift;
  unsigned __int8 ClusterShift;
  unsigned __int8 Reserved;
  unsigned __int16 NumberOfChunks;
  unsigned int CompressedChunkSizes[1];
};

/* 731 */
struct $C01B28EF2D12A4EAA4A485ED9F6F1A86
{
  unsigned __int8 UserDefined[120];
};

/* 732 */
struct $ED15EE9222F5238D2AB246462F85F28C
{
  unsigned int PipeMode;
  unsigned __int8 UserDefined[112];
  unsigned int PipeFlags;
};

/* 733 */
union $BD9B6531D46EC3E136902510198E271C
{
  $C01B28EF2D12A4EAA4A485ED9F6F1A86 Standard;
  $ED15EE9222F5238D2AB246462F85F28C Pipe;
};

/* 734 */
struct _VMBUS_CHANNEL_OFFER
{
  _GUID InterfaceType;
  _GUID InterfaceInstance;
  unsigned __int64 InterruptLatencyIn100nsUnits;
  unsigned __int16 ChannelFlags;
  unsigned __int16 MmioMegabytes;
  unsigned __int16 MmioMegabytesOptional;
  unsigned __int16 SubChannelIndex;
  $BD9B6531D46EC3E136902510198E271C u;
};

/* 735 */
struct _VMBUS_TL_INTERFACE
{
  int (__stdcall *StartDeviceInterface)(WDFDEVICE__ *, _FILE_OBJECT *);
  int (__stdcall *ConnectRequest)(void *, _GUID, _GUID);
  _VMBUS_PIPE_INTERFACE *Pipe;
};

/* 736 */
struct _VMBUS_GET_SERVICE_INFO_OUTPUT_PARAMETERS
{
  _GUID ServiceId;
  unsigned __int8 State;
  unsigned int QosBandwidth;
};

/* 737 */
struct _HVSOCKET_TRANSPORT_INTERFACE
{
  int (__stdcall *HvSocketProviderSetupPartition)(void *, WDFDEVICE__ *, _DEVICE_OBJECT *, void *, _GUID, void *, _VMBUS_TL_INTERFACE *, void **);
  void (__stdcall *HvSocketProviderCleanupPartition)(void *);
  int (__stdcall *HvSocketProviderPausePartition)(void *);
  int (__stdcall *HvSocketProviderResumePartition)(void *);
  int (__stdcall *HvSocketProviderConnectNotification)(void *, _GUID, _GUID, _GUID);
  void (__stdcall *HvSocketProviderIncomingConnectNotification)(void *, WDFDEVICE__ *, _FILE_OBJECT *, _VMBUS_CHANNEL_OFFER *);
  int (__stdcall *HvSocketProviderGetServiceInfo)(void *, _VMBUS_GET_SERVICE_INFO_INPUT_PARAMETERS *, _VMBUS_GET_SERVICE_INFO_OUTPUT_PARAMETERS *);
  int (__stdcall *HvSocketProviderUpdateServiceInfo)(void *, void *, unsigned int);
  int (__stdcall *HvSocketProviderUpdateServiceTable)(void *, void *, unsigned int);
};

/* 502 */
struct _FAST_MUTEX
{
  int Count;
  void *Owner;
  unsigned int Contention;
  _KEVENT Event;
  unsigned int OldIrql;
};

/* 738 */
struct _VMBUS_FDO_CONTEXT
{
  unsigned __int8 XPartLibInterruptEnabled;
  unsigned __int8 InterruptCallbacksRegistered;
  _FAST_MUTEX Lock;
  _LIST_ENTRY PartitionList;
  _LIST_ENTRY DeviceInterfaceList;
  void *TlProviderHandle;
  void *TlPartitionContext;
  $C7CF0B33A06A93C83C053C117C90164E *InterruptInfo;
  unsigned __int8 *VmbusVector;
  WDFWORKITEM__ *ArrivalNotificationWorkItem;
  void (__stdcall *ArrivalCallback)(void *, WDFDEVICE__ *, _FILE_OBJECT *, _VMBUS_CHANNEL_OFFER *);
  void *ArrivalContext;
  _HVSOCKET_TRANSPORT_INTERFACE TlProviderInterface;
};

/* 730 */
struct $C7CF0B33A06A93C83C053C117C90164E
{
  _KINTERRUPT *VMBusInterruptObject;
};

/* 374 */
struct WDFWORKITEM__
{
  int unused;
};

/* 748 */
struct _CHANNEL_OFFER_CACHE_ENTRY
{
  unsigned __int8 MonitorId;
  unsigned int ConnectionId;
  unsigned int ChildRelId;
  unsigned __int8 IsDedicatedInterrupt;
  _VMBUS_CHANNEL_OFFER Offer;
};

/* 776 */
struct _CHANNEL_ISR
{
  unsigned __int8 (__stdcall *Isr)(void *);
  void *IsrContext;
  unsigned __int8 InterruptPending;
  _KDPC Dpc;
};

/* 777 */
struct $57434A2348149414EA0114728B82027C
{
  unsigned int RingBufferGpadl;
  unsigned int DownstreamRingBufferPageOffset;
  unsigned int TargetVp;
  unsigned __int8 OpenUserData[120];
  unsigned int OpenId;
};

/* 762 */
struct $8AF32EEB00CC3F214E56707D239D3B7E
{
  unsigned __int32 Id : 24;
  unsigned __int32 Reserved : 8;
};

/* 763 */
union _HV_CONNECTION_ID
{
  unsigned int AsUINT32;
  $8AF32EEB00CC3F214E56707D239D3B7E __s1;
};

/* 142 */
enum _CLIENT_OFFER_STATE : __int32
{
  ClientOfferStateClosed = 0x0,
  ClientOfferStateOpening = 0x1,
  ClientOfferStateOpen = 0x2,
  ClientOfferStateRevoked = 0x3,
};

/* 141 */
enum _OFFER_EVENT : __int32
{
  OfferEventCreated = 0x1,
  OfferEventDupRestore = 0x2,
  OfferEventDuplicate = 0x3,
  OfferEventNameCollision = 0x4,
  OfferEventAdopt = 0x5,
  OfferEventRestore = 0x6,
  OfferEventInserted = 0x7,
  OfferEventPended = 0x8,
  OfferEventPendingOfferSucceeded = 0x9,
  OfferEventPendingOfferFailed = 0xA,
  OfferEventRevoke = 0xB,
  OfferEventOpen = 0xC,
  OfferEventRevokeOrphaned = 0xD,
  OfferEventSavedRevoked = 0xE,
  OfferEventExternalRevoke = 0xF,
  OfferEventGpadlHeader = 0x10,
  OfferEventGpadlBody = 0x11,
  OfferEventGpadlTeardown = 0x12,
  OfferEventOpenSuccess = 0x13,
  OfferEventOpenFailed = 0x14,
  OfferEventClientArrival = 0x15,
  OfferEventClientArriveExists = 0x16,
  OfferEventClientOpen = 0x17,
  OfferEventClientClose = 0x18,
  OfferEventClientRescind = 0x19,
  OfferEventClientOpenResult = 0x1A,
  OfferEventOfferedToClient = 0x1B,
  OfferEventReleasedByClient = 0x1C,
  OfferEventClose = 0x1D,
};

/* 782 */
struct _OFFER_EVENT_ENTRY
{
  _OFFER_EVENT Event;
  unsigned __int64 Time;
};

/* 779 */
struct _LOCAL_OFFER
{
  _LIST_ENTRY ListEntry;
  _CHANNEL_OFFER_CACHE_ENTRY CacheEntry;
  _XPART_PARTITION *OppositeEndpointPartition;
  _SINGLE_LIST_ENTRY DestroyListEntry;
  _XPART_INTERRUPT *Interrupt;
  int RefCount;
  unsigned __int8 IsServer;
  unsigned int RingBufferGpadl;
  unsigned int DownstreamRingBufferPageOffset;
  unsigned __int8 OpenUserData[120];
  _CHANNEL_ISR Isr;
  unsigned int OpenId;
  _BYTE ServerState[];
  __declspec(align(8)) $57434A2348149414EA0114728B82027C PendingOpen;
  void *ChannelContext;
  _VMBUS_CHANNEL_RESCIND_OFFER *ServerMsgRescind;
  _LOCAL_OFFER *PendingOffer;
  unsigned __int8 IsReferencedByClient;
  int PendingOfferStatus;
  unsigned int TargetVp;
  unsigned __int8 OpenResultSent;
  _HV_CONNECTION_ID ReserveConnectionId;
  unsigned int ReserveVpIndex;
  unsigned int ReserveSintIndex;
  unsigned int ReserveVmbusVersion;
  void (__stdcall *OpenCompletionRoutine)(void *, int);
  void *OpenCompletionContext;
  _VMBUS_CHANNEL_CLOSE_CHANNEL *ClientMsgClose;
  _VMBUS_CHANNEL_RELID_RELEASED *ClientMsgRelIdReleased;
  _CLIENT_OFFER_STATE State;
  unsigned __int8 IsRevoked;
  _LIST_ENTRY OutstandingGpadlList;
  _KEVENT *AllGpadlsTorndownEvent;
  int OfferEventLogIndex;
  _OFFER_EVENT_ENTRY OfferEventLog[32];
};

/* 753 */
struct __declspec(align(4)) $18BF0070D5B0D1392C533E21954AE487
{
  WDFIOTARGET__ *IoTarget;
  void *PartitionContext;
  _XPART_VID_TARGET_CONTEXT *VidTarget;
  unsigned __int8 NumaSpanningAllowed;
  unsigned __int8 LockChildPagesMaxIrql;
};

/* 754 */
struct _XPART_RELID_TABLE
{
  unsigned int UsedCount;
  unsigned int Capacity;
  unsigned int HighestIdUsed;
  void **Contexts;
};

/* 755 */
struct $3CC13C4F324CB7375551E407EF53209A
{
  unsigned int VMBusVersionRequested;
  unsigned int TargetMessageVp;
  unsigned __int64 InterruptPage;
  unsigned __int64 ParentToChildMonitorPageGpa;
  unsigned __int64 ChildToParentMonitorPageGpa;
};

/* 766 */
struct _XPART_PARTITION_PNC_CHILD_DATA
{
  void *InterruptPage;
};

/* 767 */
struct __declspec(align(8)) $1328339B5B18DA666D67B36E4AACB296
{
  _LIST_ENTRY PartitionList;
  _XPART_INTERRUPT_PAGE *IsrRecvPage;
  _XPART_INTERRUPT_PAGE *IsrSendPage;
  unsigned __int8 IsConnected;
  _LIST_ENTRY ThrottledList;
  unsigned int ThrottledTimeRemaining;
  volatile int SpuriousCount;
  void *MappedMonitorPages;
  _HV_MONITOR_PAGE *OutgoingMonitorPage;
  _HV_MONITOR_PAGE *IncomingMonitorPage;
  unsigned __int8 ChildMessagePortValid;
  unsigned __int8 ChildMonitorPortValid;
  unsigned __int64 ChildVpEventPortValid;
  _XPART_PARTITION_PNC_CHILD_DATA ChildData;
};

/* 128 */
enum _KBUGCHECK_CALLBACK_REASON : __int32
{
  KbCallbackInvalid = 0x0,
  KbCallbackReserved1 = 0x1,
  KbCallbackSecondaryDumpData = 0x2,
  KbCallbackDumpIo = 0x3,
  KbCallbackAddPages = 0x4,
  KbCallbackSecondaryMultiPartDumpData = 0x5,
  KbCallbackRemovePages = 0x6,
};

/* 775 */
struct __declspec(align(4)) _KBUGCHECK_REASON_CALLBACK_RECORD
{
  _LIST_ENTRY Entry;
  void (__stdcall *CallbackRoutine)(_KBUGCHECK_CALLBACK_REASON, _KBUGCHECK_REASON_CALLBACK_RECORD *, void *, unsigned int);
  unsigned __int8 *Component;
  unsigned int Checksum;
  _KBUGCHECK_CALLBACK_REASON Reason;
  unsigned __int8 State;
};

/* 768 */
struct _XPART_PARTITION
{
  _LIST_ENTRY ListEntry;
  _SINGLE_LIST_ENTRY ListRemove;
  _LIST_ENTRY PendedSendPartitionsListEntry;
  _LIST_ENTRY PendedSendMessages;
  struct _IO_WORKITEM *RecvMessageWorkItem;
  volatile int RecvMessageWorkItemQueued;
  volatile int RecvMessageWorkItemActive;
  _KEVENT RecvMessageWorkerLock;
  unsigned __int64 PartitionId;
  _GUID VmGuid;
  _UNICODE_STRING VmName;
  int RefCount;
  unsigned int VmbusVersion;
  unsigned int MaximumSupportedVersion;
  unsigned int FailedProtocolVersion;
  unsigned int TargetMessageVp;
  _KEVENT *DestroyEvent;
  _IRP *DestroyIrp;
  $18BF0070D5B0D1392C533E21954AE487 Vid;
  _XPART_RELID_TABLE RelIdTable;
  _FAST_MUTEX InterruptMutex;
  unsigned int InterruptListLock;
  _LIST_ENTRY InterruptList;
  unsigned __int8 IsDeleted;
  unsigned __int8 IsPaused;
  unsigned __int8 IsSaveInProgress;
  unsigned __int16 VirtualNodeCount;
  unsigned int VpCount;
  unsigned __int8 VirtualToPhysicalNode[64];
  unsigned __int8 VpToVirtualNode[240];
  unsigned int QuotaLimit;
  volatile unsigned int QuotaUsed;
  _FAST_MUTEX ChannelLock;
  _BYTE ClosingState[];
  __declspec(align(8)) _KEVENT ChannelsClosedEvent;
  unsigned __int8 NotifyOnClosed;
  struct _IO_WORKITEM *CloseWorkItem;
  unsigned int OpenChannelCount;
  unsigned int ReservedOpenChannelCount;
  $3CC13C4F324CB7375551E407EF53209A ReinitiateContact;
  _LIST_ENTRY ServerChannelList;
  _LIST_ENTRY ClientChannelList;
  _RTL_AVL_TABLE GpadlPacketListTable;
  _DV_HANDLE_TABLE GpadlHandleTable;
  unsigned int GpadlListLock;
  _XPART_WAIT_FOR_CONNECT *WaitForConnect;
  unsigned __int8 OffersDelivered;
  $1328339B5B18DA666D67B36E4AACB296 Pnc;
  _XPART_SEND_MESSAGE *LowResourcesMessage;
  int LowResourcesMessageInUse;
  int (__stdcall *SendMessage)(_XPART_PARTITION *, _XPART_SEND_MESSAGE *);
  int (__stdcall *PullMessage)(_XPART_PARTITION *, void *, unsigned int *);
  void (__stdcall *CleanupPartition)(_XPART_PARTITION *);
  void (__stdcall *DestroyPartition)(_XPART_PARTITION *);
  void (__stdcall *PartitionReset)(_XPART_PARTITION *);
  void (__stdcall *SuspendMessages)(_XPART_PARTITION *);
  void (__stdcall *ResumeMessages)(_XPART_PARTITION *);
  void (__stdcall *Pause)(_XPART_PARTITION *);
  void (__stdcall *Resume)(_XPART_PARTITION *);
  int (__stdcall *ClaimInterruptResources)(_XPART_INTERRUPT *, _XPART_INTERRUPT_REQUIREMENTS *);
  void (__stdcall *ReleaseInterruptResources)(_XPART_INTERRUPT *);
  void (__stdcall *EnableInterrupt)(_XPART_INTERRUPT *, unsigned int, unsigned __int64);
  void (__stdcall *DisableInterrupt)(_XPART_INTERRUPT *);
  int (__stdcall *SetInterruptPreferredProcessor)(_XPART_INTERRUPT *, unsigned int);
  int (__stdcall *ProcessorIndexToVpIndex)(_XPART_PARTITION *, unsigned int, unsigned int *);
  _KBUGCHECK_REASON_CALLBACK_RECORD BugCheckReasonCallbackRecord;
  unsigned int BugCheckCallbackIndex;
  unsigned int BugCheckCallbackPageCount;
  unsigned __int8 BugCheckCallbackRegistered;
};

/* 770 */
union _HV_PORT_ID
{
  unsigned int AsUINT32;
  $8AF32EEB00CC3F214E56707D239D3B7E __s1;
};

/* 771 */
struct _XPART_EVENT_FLAG
{
  unsigned __int16 Number;
};

/* 772 */
struct $65100114B277440569C27DAA27F985E5
{
  unsigned __int8 MonitorId;
  _HV_PORT_ID ParentPortId;
  _HV_CONNECTION_ID ChildConnectionId;
  unsigned int ChildTargetVp;
  _XPART_EVENT_FLAG Flag;
  unsigned __int8 IsDedicated;
  _XPART_INTERRUPT_PAGE *OutgoingInterruptPage;
  _HV_MONITOR_TRIGGER_GROUP *OutgoingMonitorGroup;
  unsigned int OutgoingMonitorTriggerNumber;
  _HV_CONNECTION_ID OutgoingConnectionId;
  unsigned __int16 OutgoingFlagNumber;
  _XPART_INTERRUPT_PAGE *IncomingInterruptPage;
  _HV_MONITOR_TRIGGER_GROUP *IncomingMonitorGroup;
  unsigned int IncomingMonitorTriggerNumber;
  unsigned __int64 IncomingMonitorTriggerMask;
};

/* 773 */
struct _XPART_INTERRUPT
{
  _XPART_PARTITION *Partition;
  _LIST_ENTRY Link;
  void *Context;
  unsigned int RelId;
  volatile int SpuriousCount;
  unsigned int ChannelLock;
  $65100114B277440569C27DAA27F985E5 Pnc;
};

/* 334 */
struct WDFIOTARGET__
{
  int unused;
};

/* 146 */
enum _VID_ACCESS_TYPE : __int32
{
  VidAccessInvalid = 0x0,
  VidAccessReadOnly = 0x1,
  VidAccessReadWrite = 0x2,
  VidAccessReadWriteWhilePaused = 0x3,
};

/* 751 */
struct _VID_KM_INTERFACE
{
  unsigned __int16 Size;
  unsigned __int16 Version;
  void *Context;
  void (__stdcall *InterfaceReference)(void *);
  void (__stdcall *InterfaceDereference)(void *);
  int (__stdcall *GetPartitionInformation)(void *, _FILE_OBJECT *, _VID_PARTITION_INFORMATION *, unsigned __int64);
  int (__stdcall *CreateMbSpecifyParentGpas)(void *, unsigned int *, unsigned __int64, void **);
  int (__stdcall *DestroyMb)(void *, void *);
  int (__stdcall *LockChildGpaPagesBulkAsync)(void *, _VID_BULK_LOCK_RANGE **, unsigned int, _VID_ACCESS_TYPE, void *, void (__stdcall *)(int, void *), _MDL **);
  unsigned int (__stdcall *GetLockRequestStructureSize)(void *);
  unsigned int (__stdcall *CancelLockChildGpaPagesRequest)(void *);
  int (__stdcall *UnlockChildGpaPagesBulk)(void *, _VID_BULK_LOCK_RANGE **, _MDL **, unsigned int);
  int (__stdcall *GetNumaNodeMap)(void *, unsigned int, unsigned __int8 *, unsigned int *, unsigned int, unsigned __int8 *, unsigned int *);
  int (__stdcall *CreateMbGpaRange)(void *, void *, unsigned __int64, unsigned __int64, void **);
  int (__stdcall *DestroyGpaRange)(void *, void *);
};

/* 752 */
struct _XPART_VID_TARGET_CONTEXT
{
  _VID_KM_INTERFACE KmInterface;
  unsigned int InterfaceRefCount;
  WDFSTRING__ *SymbolicLink;
};

/* 756 */
struct _XPART_WAIT_FOR_CONNECT
{
  void *Context;
  void (__stdcall *ConnectNotification)(_XPART_WAIT_FOR_CONNECT *, unsigned int, unsigned int, unsigned __int8);
};

/* 757 */
struct _XPART_INTERRUPT_PAGE
{
  int Entries[512];
};

/* 758 */
struct $C6CC3B9050189AD804F713E12A27C65E
{
  unsigned __int32 GroupEnable : 4;
  unsigned __int32 RsvdZ : 28;
};

/* 759 */
union _HV_MONITOR_TRIGGER_STATE
{
  unsigned int AsUINT32;
  $C6CC3B9050189AD804F713E12A27C65E __s1;
};

/* 760 */
struct $91318E1C0A0AE0C9A15BE4B6402D8415
{
  unsigned int Pending;
  unsigned int Armed;
};

/* 761 */
union _HV_MONITOR_TRIGGER_GROUP
{
  unsigned __int64 AsUINT64;
  $91318E1C0A0AE0C9A15BE4B6402D8415 __s1;
};

/* 764 */
struct _HV_MONITOR_PARAMETER
{
  _HV_CONNECTION_ID ConnectionId;
  unsigned __int16 FlagNumber;
  unsigned __int16 RsvdZ;
};

/* 765 */
struct _HV_MONITOR_PAGE
{
  _HV_MONITOR_TRIGGER_STATE TriggerState;
  unsigned int RsvdZ1;
  _HV_MONITOR_TRIGGER_GROUP TriggerGroup[4];
  unsigned __int64 RsvdZ2[3];
  int NextCheckTime[4][32];
  unsigned __int16 Latency[4][32];
  unsigned __int64 RsvdZ3[32];
  _HV_MONITOR_PARAMETER Parameter[4][32];
  unsigned __int8 RsvdZ4[1984];
};

/* 769 */
struct _XPART_SEND_MESSAGE
{
  _LIST_ENTRY ListEntry;
  _XPART_PARTITION *Partition;
  unsigned int Length;
  void (__stdcall *Destroy)(_XPART_SEND_MESSAGE *, void *);
  void *DestroyContext;
  void *Data;
};

/* 774 */
struct __declspec(align(4)) _XPART_INTERRUPT_REQUIREMENTS
{
  void *Context;
  unsigned int RelId;
  unsigned __int8 MonitorId;
  unsigned int ConnectionId;
  unsigned __int16 VirtualNodeIndex;
  unsigned __int8 IsFullySpecified;
  unsigned __int8 RequestMonitor;
  unsigned __int8 IsDedicated;
};

/* 749 */
struct __declspec(align(2)) _VID_PARTITION_INFORMATION
{
  unsigned __int64 PartitionId;
  void *PartitionContext;
  unsigned __int8 NumaSpanningAllowed;
  unsigned __int8 ClientProcessContextRequired;
  unsigned __int8 MaxIrql;
};

/* 750 */
struct _VID_BULK_LOCK_RANGE
{
  unsigned int ByteCount;
  unsigned int ByteOffset;
  unsigned __int64 PfnArray[1];
};

/* 362 */
struct WDFSTRING__
{
  int unused;
};

/* 804 */
struct $B2F32F6B890C80906800572ADD5B86DE
{
  _MVM_CONTEXT *Context;
  unsigned int ChannelId;
  unsigned int ConnectionId;
  unsigned __int8 Reserved;
  void *Handle;
};

/* 805 */
struct $3069978BCCC42F1BEFCBE9101DA05AF2
{
  unsigned __int8 Available;
  void *Handle;
  void *VmbusProtocol;
};

/* 806 */
union $84D8B10D637777B3F3F2C8CEE74ECA80
{
  $B2F32F6B890C80906800572ADD5B86DE MiniVmbus;
  $3069978BCCC42F1BEFCBE9101DA05AF2 EfiVmbus;
};

/* 802 */
struct _MVM_CHANNEL
{
  unsigned __int8 Initialized;
  _GUID InterfaceType;
  _GUID InterfaceInstance;
  $84D8B10D637777B3F3F2C8CEE74ECA80 ___u3;
};

/* 807 */
struct __declspec(align(64)) _VMBUS_CRASH_CHANNEL
{
  _LIST_ENTRY ListEntry;
  _GUID InterfaceGuid;
  _GUID InstanceGuid;
  _MVM_CHANNEL MiniChannel;
  unsigned int RingBufferGpadl;
  void *RingBuffer;
  _MDL *RingBufferMdl;
  unsigned int IncomingPageCount;
  unsigned int OutgoingPageCount;
  _PACKET_LIB_CONTEXT PkLibContext;
  unsigned __int8 Accepted;
  unsigned __int8 IsPipe;
};

/* 786 */
struct $5C1F9265A2FB4D6C63FDE5278000A83C
{
  unsigned __int16 CallStatus;
  unsigned __int16 Reserved1;
  unsigned __int32 ElementsProcessed : 12;
  unsigned __int32 Reserved2 : 20;
};

/* 787 */
union _HV_HYPERCALL_OUTPUT
{
  $5C1F9265A2FB4D6C63FDE5278000A83C __s0;
  unsigned __int64 AsUINT64;
};

/* 788 */
struct $E94CC24929C83E40C1B520F0BF2C96CA
{
  unsigned __int32 CallCode : 16;
  unsigned __int32 IsFast : 1;
  unsigned __int32 Reserved1 : 14;
  unsigned __int32 IsNested : 1;
  unsigned __int32 CountOfElements : 12;
  unsigned __int32 Reserved2 : 4;
  unsigned __int32 RepStartIndex : 12;
  unsigned __int32 Reserved3 : 4;
};

/* 789 */
union _HV_HYPERCALL_INPUT
{
  $E94CC24929C83E40C1B520F0BF2C96CA __s0;
  unsigned __int64 AsUINT64;
};

/* 799 */
struct $2954D343275FA966F67CA07F4BE3DD3E
{
  unsigned __int64 Vector : 8;
  unsigned __int64 ReservedP1 : 8;
  unsigned __int64 Masked : 1;
  unsigned __int64 AutoEoi : 1;
  unsigned __int64 Polling : 1;
  unsigned __int64 ReservedP2 : 45;
};

/* 800 */
union _HV_SYNIC_SINT
{
  unsigned __int64 AsUINT64;
  $2954D343275FA966F67CA07F4BE3DD3E __s1;
};

/* 803 */
struct _MVM_INTERFACE
{
  void (__stdcall *AcceptChannel)(_MVM_CONTEXT *, void *, _MVM_CHANNEL *);
  unsigned __int8 (__stdcall *CreateGpadl)(_MVM_CHANNEL *, unsigned int *, unsigned int, unsigned int, unsigned int *);
  void (__stdcall *DeleteGpadl)(_MVM_CHANNEL *, unsigned int);
  unsigned __int8 (__stdcall *OpenChannel)(_MVM_CHANNEL *, unsigned int, unsigned int);
  unsigned __int8 (__stdcall *OpenChannelReserved)(_MVM_CHANNEL *, unsigned int, unsigned int);
  void (__stdcall *SignalChannel)(_MVM_CHANNEL *);
  void (__stdcall *CloseChannel)(_MVM_CHANNEL *);
};

/* 801 */
struct __declspec(align(8)) _MVM_CONTEXT
{
  void *HypercallInput;
  unsigned __int64 HypercallInputPhysicalAddress;
  void *HypercallPage;
  _HV_HYPERCALL_OUTPUT (__stdcall *HypercallRoutine)(_HV_HYPERCALL_INPUT, unsigned __int64, unsigned __int64);
  _HV_MESSAGE_PAGE *SintMessagePage;
  void *SintMessagePageBuffer;
  unsigned __int64 SintMessagePagePhysicalAddress;
  unsigned int NextGpadlIndex;
  unsigned int ActiveSint;
  _HV_SYNIC_SINT SavedSint;
  _MVM_INTERFACE VmbusInterface;
  unsigned int RequestedVersion;
  unsigned __int8 PollingModeSupported;
  unsigned __int8 Nested;
};

/* 132 */
enum _HV_MESSAGE_TYPE : __int32
{
  HvMessageTypeNone = 0x0,
  HvMessageTypeUnmappedGpa = 0x80000000,
  HvMessageTypeGpaIntercept = 0x80000001,
  HvMessageTimerExpired = 0x80000010,
  HvMessageTypeInvalidVpRegisterValue = 0x80000020,
  HvMessageTypeUnrecoverableException = 0x80000021,
  HvMessageTypeUnsupportedFeature = 0x80000022,
  HvMessageTypeTlbPageSizeMismatch = 0x80000023,
  HvMessageTypeEventLogBufferComplete = 0x80000040,
  HvMessageTypeHypercallIntercept = 0x80000050,
  HvMessageTypeMsrIntercept = 0x80010001,
  HvMessageTypeExceptionIntercept = 0x80010003,
  HvMessageTypeRegisterIntercept = 0x80010006,
  HvMessageTypeX64IoPortIntercept = 0x80010000,
  HvMessageTypeX64CpuidIntercept = 0x80010002,
  HvMessageTypeX64ApicEoi = 0x80010004,
  HvMessageTypeX64LegacyFpError = 0x80010005,
};

/* 790 */
struct $6B81CF09F26873C195E2CE989509E704
{
  unsigned __int8 MessagePending : 1;
  unsigned __int8 Reserved : 7;
};

/* 791 */
union _HV_MESSAGE_FLAGS
{
  unsigned __int8 AsUINT8;
  $6B81CF09F26873C195E2CE989509E704 __s1;
};

/* 792 */
union $F49BA4D38B89DB6D2FB4E1D78F50304E
{
  unsigned __int64 Sender;
  _HV_PORT_ID Port;
};

/* 793 */
struct _HV_MESSAGE_HEADER
{
  _HV_MESSAGE_TYPE MessageType;
  unsigned __int8 PayloadSize;
  _HV_MESSAGE_FLAGS MessageFlags;
  unsigned __int8 Reserved[2];
  $F49BA4D38B89DB6D2FB4E1D78F50304E ___u4;
};

/* 794 */
struct _HV_TIMER_MESSAGE_PAYLOAD
{
  unsigned int TimerIndex;
  unsigned int Reserved;
  unsigned __int64 ExpirationTime;
  unsigned __int64 DeliveryTime;
};

/* 131 */
enum HV_EVENTLOG_TYPE : __int32
{
  HvEventLogTypeGlobalSystemEvents = 0x0,
  HvEventLogTypeLocalDiagnostics = 0x1,
  HvEventLogTypeMaximum = 0x1,
};

/* 795 */
struct _HV_EVENTLOG_MESSAGE_PAYLOAD
{
  HV_EVENTLOG_TYPE EventLogType;
  unsigned int BufferIndex;
};

/* 796 */
union $BCDF5AD828D29F6DF0174E0A56B52C52
{
  unsigned __int64 Payload[30];
  _HV_TIMER_MESSAGE_PAYLOAD TimerPayload;
  _HV_EVENTLOG_MESSAGE_PAYLOAD TracePayload;
};

/* 797 */
volatile struct _HV_MESSAGE
{
  _HV_MESSAGE_HEADER Header;
  $BCDF5AD828D29F6DF0174E0A56B52C52 ___u1;
};

/* 798 */
struct _HV_MESSAGE_PAGE
{
  volatile _HV_MESSAGE SintMessage[16];
};

/* 785 */
struct _CHANNEL_STATE
{
  _LOCAL_OFFER *ChannelHandle;
};

/* 808 */
struct __declspec(align(8)) _VMBUS_INSTANCE_CONTEXT
{
  _MDL *RingBufferMdl;
  unsigned int RingBufferGpadl;
  WDFREQUEST__ *RingBufferRequest;
  WDFWAITLOCK__ *IoctlLock;
  unsigned int DownstreamRingBufferPageOffset;
  int FileHandleCount;
  WDFQUEUE__ *UnreportedGpadlRequests;
  WDFCOLLECTION__ *ReportedGpadlRequests;
  WDFREQUEST__ *OpenRequest;
  _KEVENT *CloseEvent;
  _VMBUS_CHANNEL_OFFER OfferParameters;
  _CHANNEL_STATE ChannelState;
  _VMBUS_PIPE *Pipe;
  unsigned __int8 ChannelOpen;
  _VMBUS_CHANNEL_ACTION QueuedAction;
  WDFQUEUE__ *WaitForActionQueue;
  WDFWORKITEM__ *WaitForActionWorker;
  unsigned int TargetProcessorIndex;
  unsigned __int8 TargetProcessorIndexChosen;
  _VMBUS_CRASH_CHANNEL *CrashChannel;
};

/* 322 */
struct WDFREQUEST__
{
  int unused;
};

/* 470 */
struct WDFWAITLOCK__
{
  int unused;
};

/* 321 */
struct WDFQUEUE__
{
  int unused;
};

/* 422 */
struct WDFCOLLECTION__
{
  int unused;
};

/* 811 */
struct _VMB_CHANNEL_STATE_CHANGE_CALLBACKS
{
  unsigned int Version;
  unsigned int Size;
  int (__stdcall *EvtChannelOpened)(VMBCHANNEL__ *);
  void (__stdcall *EvtChannelClosed)(VMBCHANNEL__ *);
  void (__stdcall *EvtChannelSuspend)(VMBCHANNEL__ *);
  void (__stdcall *EvtChannelStarted)(VMBCHANNEL__ *);
  void (__stdcall *EvtChannelPostStarted)(VMBCHANNEL__ *);
};

/* 812 */
struct _VMBUS_CRASH_INTERFACE
{
  void *Context;
  unsigned __int8 (__stdcall *OpenChannel)(void *);
  unsigned __int8 (__stdcall *SendPacket)(void *, _VMBUS_CRASH_PACKET_TYPE, unsigned __int64, void *, unsigned int, _MDL *);
  unsigned __int8 (__stdcall *ReceivePacket)(void *, _VMBUS_CRASH_PACKET_TYPE *, unsigned __int64 *, void *, unsigned int *);
};

/* 813 */
struct _VMBUS_QUERY_CHANNEL_PARAMETERS
{
  _GUID InterfaceType;
  _GUID InterfaceInstance;
  unsigned int CurrentTargetProcessorIndex;
  unsigned __int16 SubChannelIndex;
  __declspec(align(4)) unsigned __int8 UserDefined[120];
};

/* 814 */
struct __declspec(align(4)) _VMBUS_OPEN_CHANNEL_INPUT_PARAMETERS
{
  unsigned __int8 UserDefined[120];
  unsigned int TargetProcessorIndex;
  unsigned __int8 TargetProcessorIndexValid;
};

/* 815 */
struct _VMBUS_RING_BUFFER_PARAMETERS
{
  unsigned int DownstreamRingBufferPageOffset;
};

/* 816 */
struct _VMBUS_GET_CRASH_INTERFACE_INPUT
{
  unsigned int IncomingRingBufferPageCount;
  unsigned int OutgoingRingBufferPageCount;
};

/* 817 */
struct _VMBUS_WAIT_FOR_ACTION_OUTPUT_PARAMETERS
{
  _VMBUS_CHANNEL_ACTION Action;
};

/* 818 */
struct INSTANCE_CHILD_OBJECT_CONTEXT
{
  _VMBUS_INSTANCE_CONTEXT *PdoContext;
};

/* 819 */
struct _VMBUS_PROCESSOR
{
  unsigned __int16 NodeNumber;
  unsigned int ChannelCount;
};

/* 522 */
struct _GROUP_AFFINITY
{
  unsigned int Mask;
  unsigned __int16 Group;
  unsigned __int16 Reserved[3];
};

/* 820 */
struct _VMBUS_NODE
{
  _GROUP_AFFINITY GroupAffinity;
  unsigned int ProcessorCount;
  unsigned int ProximityId;
  unsigned __int8 ProximityIdFound;
  unsigned int ChannelCount;
};

/* 821 */
struct __declspec(align(4)) _VMBUS_LOCK_CHILD_PAGES_PARAMS
{
  unsigned int ContextSize;
  unsigned __int8 MaxIrql;
};

/* 825 */
struct __declspec(align(4)) _VMBUS_QUERY_SERVER_OPEN_CHANNEL_OUTPUT_PARAMETERS
{
  unsigned int RingBufferGpadlHandle;
  unsigned int DownstreamRingBufferPageOffset;
  unsigned __int16 NodeNumber;
};

/* 115 */
enum _LOCK_OPERATION : __int32
{
  IoReadAccess = 0x0,
  IoWriteAccess = 0x1,
  IoModifyAccess = 0x2,
};

/* 827 */
struct _VMBUS_INTERFACE_STANDARD
{
  unsigned __int16 Size;
  unsigned __int16 Version;
  void *Context;
  void (__stdcall *InterfaceReference)(void *);
  void (__stdcall *InterfaceDereference)(void *);
  void (__stdcall *ChCloseChannel)(void *);
  int (__stdcall *ChOpenChannel)(void *, _VMBUS_QUERY_SERVER_OPEN_CHANNEL_OUTPUT_PARAMETERS *);
  void (__stdcall *ChOpenResult)(void *, int);
  int (__stdcall *ChCreateGpadlFromBuffer)(void *, void *, unsigned int, _LOCK_OPERATION, unsigned int *);
  int (__stdcall *ChCreateGpadlFromNtmdl)(void *, _MDL *, unsigned int, unsigned int, unsigned int *);
  void (__stdcall *ChTeardownGpadl)(void *, unsigned int);
  int (__stdcall *ChMapGpadlView)(void *, unsigned int, unsigned int, _MDL **);
  int (__stdcall *ChUnmapGpadlView)(void *, unsigned int);
  int (__stdcall *ChGpaDirectToMdl)(void *, _GPA_RANGE **, _MDL **, unsigned int);
  void (__stdcall *ChGpaDirectTeardownMdl)(void *, _GPA_RANGE **, _MDL **, unsigned int, unsigned int);
  void (__stdcall *ChRegisterIsr)(void *, unsigned __int8 (__stdcall *)(void *), void *);
  void (__stdcall *ChUnregisterIsr)(void *);
  unsigned __int8 (__stdcall *ChSendInterrupt)(void *, unsigned __int8);
  unsigned __int8 (__stdcall *ChCancelInterrupt)(void *);
  unsigned __int8 (__stdcall *ChQueueWorkItem)(void *, VMBWORKITEM__ *, void (__stdcall *)(void *), void *);
  int (__stdcall *ChCreateWorkItem)(void *, void *, VMBWORKITEM__ **);
  void (__stdcall *ChDestroyWorkItem)(void *, VMBWORKITEM__ *);
  int (__stdcall *ChSetInterruptPreferredProcessor)(void *, unsigned int);
  int (__stdcall *ChGetNumaNodeMap)(void *, unsigned int, unsigned int *, unsigned int *, unsigned int *);
  void (__stdcall *ChGetVmName)(void *, _UNICODE_STRING *, unsigned __int16 *, _GUID *);
  int (__stdcall *ChGetLockChildPagesParams)(void *, _VMBUS_LOCK_CHILD_PAGES_PARAMS *);
  int (__stdcall *ChLockChildPages)(void *, void *, void (__stdcall *)(void *, int), unsigned int, _GPA_RANGE **, _MDL **, unsigned int);
  void (__stdcall *ChUnlockChildPages)(void *, _GPA_RANGE **, _MDL **, unsigned int, unsigned int);
  int (__stdcall *ChMapChildMmioSpace)(void *, unsigned int *, unsigned int, _LARGE_INTEGER, void *);
  void (__stdcall *ChUnmapChildMmioSpace)(void *, void *);
};

/* 826 */
struct VMBWORKITEM__
{
  int unused;
};

/* 359 */
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER
{
  unsigned int IdentificationDescriptionSize;
};

/* 828 */
struct __declspec(align(8)) INSTANCE_PDO_DESCRIPTION
{
  _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER Header;
  _VMBUS_CHANNEL_OFFER OfferParameters;
  _LOCAL_OFFER *ChannelHandle;
};

/* 120 */
enum _PIPE_QUEUE_ENTRY_TYPE : __int32
{
  PipeQueueEntryInvalid = 0x0,
  PipeQueueEntryIrp = 0x1,
  PipeQueueEntrySetupGpaRange = 0x2,
  PipeQueueEntryTeardownGpaRange = 0x3,
};

/* 831 */
struct _PIPE_QUEUE_ENTRY
{
  _PIPE_QUEUE_ENTRY_TYPE Type;
  _VMBUS_PIPE *Pipe;
  _LIST_ENTRY Entry;
};

/* 832 */
struct __unaligned __declspec(align(1)) _VMPIPE_SETUP_GPA_DIRECT_BODY
{
  unsigned int Handle;
  unsigned __int8 IsWritable;
  unsigned int RangeCount;
  _GPA_RANGE Range[1];
};

/* 833 */
struct __declspec(align(4)) _PIPE_GPAD_CLIENT_RANGE
{
  _PIPE_QUEUE_ENTRY QueueEntry;
  unsigned int SetupPacketLength;
  _VMPIPE_SETUP_GPA_DIRECT_BODY SetupPacket;
};

/* 834 */
struct _VMBUS_RDMA_MEMORY_DESCRIPTOR
{
  unsigned __int64 Offset;
  unsigned int Token;
  unsigned int Length;
};

/* 835 */
struct _VMBUS_PIPE_DATA_INDICATION_CONTEXT
{
  unsigned int PacketOffset;
  _VMPIPE_PROTOCOL_MESSAGE_TYPE PacketType;
};

/* 840 */
struct _VMPIPE_TEARDOWN_GPA_DIRECT_BODY
{
  unsigned int Handle;
};

/* 847 */
struct _VMBUS_DEVICE_INTERFACE_CONTEXT
{
  _LIST_ENTRY Link;
  _VMBUS_INSTANCE_CONTEXT *InstanceContext;
  _LOCAL_OFFER *ChannelHandle;
  _VMBUS_CHANNEL_OFFER *OfferParameters;
  _FILE_OBJECT *FileObject;
  _VMBUS_DEVICE_INTERFACE_STATE State;
  _LIST_ENTRY NotifyLink;
  unsigned __int8 IsGenericDeviceInterface;
  _UNICODE_STRING ReferenceString;
  wchar_t ReferenceStringBuffer[82];
};

/* 848 */
struct __declspec(align(8)) $386814A48129FC2A5B8CB4050F44BCFD
{
  _VMBUS_INSTANCE_CONTEXT InstanceContext;
  _VMBUS_DEVICE_INTERFACE_CONTEXT *DeviceInterfaceContext;
};

/* 858 */
struct _VMBUS_CRASH_PAGES
{
  unsigned __int8 HypercallInputPage[4096];
  unsigned __int8 SintMessagePage[4096];
};

/* 862 */
struct _VMTRANSFER_PAGE_RANGES
{
  _VMTRANSFER_PAGE_RANGES *Next;
  unsigned int RangeCount;
  _VMTRANSFER_PAGE_RANGE Range[1];
};

/* 885 */
union $3B0EE10C4D1D1040C98DAF18A06592CF
{
  unsigned __int8 Data[240];
  _VMBUS_CHANNEL_MESSAGE_HEADER Header;
  _VMBUS_CHANNEL_OFFER_CHANNEL OfferChannel;
  _VMBUS_CHANNEL_RESCIND_OFFER RescindOffer;
  _VMBUS_CHANNEL_OPEN_CHANNEL OpenChannel;
  _VMBUS_CHANNEL_OPEN_RESULT OpenResult;
  _VMBUS_CHANNEL_CLOSE_CHANNEL CloseChannel;
  _VMBUS_CHANNEL_GPADL_HEADER GpadlHeader;
  _VMBUS_CHANNEL_GPADL_BODY GpadlBody;
  _VMBUS_CHANNEL_GPADL_CREATED GpadlCreated;
  _VMBUS_CHANNEL_GPADL_TEARDOWN GpadlTeardown;
  _VMBUS_CHANNEL_GPADL_TORNDOWN GpadlTorndown;
  _VMBUS_CHANNEL_RELID_RELEASED RelIdReleased;
  _VMBUS_CHANNEL_INITIATE_CONTACT InitiateContact;
  _VMBUS_CHANNEL_VERSION_RESPONSE VersionResponse;
  _VMBUS_CHANNEL_MESSAGE_HEADER Unload;
  _VMBUS_CHANNEL_OPEN_RESERVED_CHANNEL OpenReservedChannel;
  _VMBUS_CHANNEL_CLOSE_RESERVED_CHANNEL CloseReservedChannel;
  _VMBUS_CHANNEL_CLOSE_RESERVED_RESPONSE CloseReservedResponse;
};

/* 140 */
enum _GPADL_STATE : __int32
{
  GpadlStateCreateWaiting = 0x0,
  GpadlStateCreatedCallback = 0x1,
  GpadlStateEstablished = 0x2,
  GpadlStateTeardownRequested = 0x3,
  GpadlStateCreatedCallbackTeardownRequested = 0x4,
  GpadlStateTeardownWaiting = 0x5,
  GpadlStateTorndownCallback = 0x6,
};

/* 909 */
struct _GPADL_CONTEXT
{
  _LIST_ENTRY List;
  _GPADL_STATE State;
  _MDL *LocalNtMdl;
  unsigned int OffsetInLocalMdl;
  unsigned int LengthInLocalMdl;
  unsigned int RangeCount;
  _GPA_RANGE *RangeBuffer;
  unsigned int RangeBufferSize;
  _LOCAL_OFFER *LocalOffer;
  unsigned int Handle;
  unsigned __int8 FreeMdl;
  void (__stdcall *GpadlCreatedFunction)(int, unsigned int, _MDL *, void *);
  void *GpadlCreatedContext;
  void (__stdcall *GpadlTorndownFunction)(void *, _MDL *);
  void *GpadlTorndownContext;
  _VMBUS_CHANNEL_GPADL_TEARDOWN *TeardownMessage;
};

/* 918 */
struct _VMBUS_DPC_ARRAY
{
  _KDPC DpcArray[2];
};

/* 919 */
struct $AF8992138EF114D703A85A7E3EF51D3B
{
  unsigned __int64 PartitionId;
  unsigned int SintIndex[2];
};

/* 920 */
struct _XPART_PNC_LIB_CONTEXT
{
  _LIST_ENTRY PncPartitionList;
  unsigned __int8 *IdtArray;
  _VMBUS_DPC_ARRAY *IsrDpcs;
  unsigned int MaxProcessors;
  volatile _HV_MESSAGE *SintMessage;
  unsigned __int8 SynicMessageDeferred;
  unsigned __int8 PerformExplicitEoi;
  $AF8992138EF114D703A85A7E3EF51D3B Server;
};

/* 954 */
typedef unsigned __int8 __stdcall EVT_VMB_CHANNEL_SIGNAL_ARRIVED(VMBCHANNEL__ *);

/* 973 */
typedef void (__stdcall *pPipeDestroy)(_VMBUS_PIPE *);

/* 990 */
typedef _VMBUS_CRASH_CHANNEL *PVMBUS_CRASH_CHANNEL;

/* 995 */
typedef _VMBUS_RDMA_MEMORY_DESCRIPTOR *PVMBUS_RDMA_MEMORY_DESCRIPTOR;

/* 1005 */
typedef int (__stdcall *pPipeConnect)(_VMBUS_PIPE *, _IRP *);

/* 1009 */
typedef _VMBUS_CHANNEL_OFFER *PVMBUS_CHANNEL_OFFER;

/* 1036 */
typedef void (__stdcall *pPipeSetIndicateMode)(_VMBUS_PIPE *, unsigned __int8, int (__stdcall *)(void *, _MDL *, unsigned int, unsigned int, VMBUS_PIPE_INDICATION_CONTEXT__ *));

/* 1039 */
typedef void __stdcall EVT_VMB_CHANNEL_SUSPEND(VMBCHANNEL__ *);

/* 1052 */
typedef void __stdcall EVT_VMB_CHANNEL_POST_STARTED(VMBCHANNEL__ *);

/* 1068 */
typedef _VMBUS_PIPE *PVMBUS_PIPE;

/* 1069 */
typedef _VMBUS_RING_BUFFER_PARAMETERS *PVMBUS_RING_BUFFER_PARAMETERS;

/* 1081 */
typedef void (__stdcall *PFN_VMB_CHANNEL_CLOSED)(VMBCHANNEL__ *);

/* 1102 */
typedef int (__stdcall *PFN_VMB_CHANNEL_OPENED)(VMBCHANNEL__ *);

/* 1110 */
typedef int (__stdcall *pChGetLockChildPagesParams)(void *, _VMBUS_LOCK_CHILD_PAGES_PARAMS *);

/* 1144 */
typedef void (__stdcall *PFN_VMB_CHANNEL_SUSPEND)(VMBCHANNEL__ *);

/* 1161 */
typedef void (__stdcall *PFN_VMB_CHANNEL_POST_STARTED)(VMBCHANNEL__ *);

/* 1165 */
typedef int __stdcall EVT_VMB_CHANNEL_OPENED(VMBCHANNEL__ *);

/* 1185 */
typedef void __stdcall EVT_VMB_CHANNEL_CLOSED(VMBCHANNEL__ *);

/* 1207 */
typedef _VMBUS_INSTANCE_CONTEXT *WDF_POINTER_TYPE_VMBUS_INSTANCE_CONTEXT;

/* 1232 */
typedef unsigned __int8 (__stdcall *PFN_VMB_CHANNEL_SIGNAL_ARRIVED)(VMBCHANNEL__ *);

/* 1282 */
typedef void (__stdcall *pPipeSetStateChangeCallbacks)(_VMBUS_PIPE *, void (__stdcall *)(void *), void (__stdcall *)(void *));

/* 1286 */
typedef _VMPIPE_TEARDOWN_GPA_DIRECT_BODY *PVMPIPE_TEARDOWN_GPA_DIRECT_BODY;

/* 1294 */
typedef _VMBUS_WAIT_FOR_ACTION_OUTPUT_PARAMETERS *PVMBUS_WAIT_FOR_ACTION_OUTPUT_PARAMETERS;

/* 1316 */
typedef int (__stdcall *pChOpenChannel)(void *, _VMBUS_QUERY_SERVER_OPEN_CHANNEL_OUTPUT_PARAMETERS *);

/* 1337 */
typedef _VMBUS_PIPE_DATA_INDICATION_CONTEXT *PVMBUS_PIPE_DATA_INDICATION_CONTEXT;

/* 1363 */
typedef _VMBUS_OPEN_CHANNEL_INPUT_PARAMETERS *PVMBUS_OPEN_CHANNEL_INPUT_PARAMETERS;

/* 1421 */
typedef int (__stdcall *pPipeCreate)(unsigned __int8, _VMBUS_PIPE **);

/* 1424 */
typedef _VMBUS_FDO_CONTEXT *PVMBUS_FDO_CONTEXT;

/* 1449 */
typedef _VMBUS_GET_SERVICE_INFO_OUTPUT_PARAMETERS *PVMBUS_GET_SERVICE_INFO_OUTPUT_PARAMETERS;

/* 1501 */
typedef _VMBUS_DEVICE_INTERFACE_CONTEXT *PVMBUS_DEVICE_INTERFACE_CONTEXT;

/* 1506 */
typedef void (__stdcall *pPipePollForIndication)(_VMBUS_PIPE *);

/* 1544 */
typedef int (__stdcall *pPipeRead)(_VMBUS_PIPE *, _IRP *);

/* 1575 */
typedef _VMBUS_TL_INTERFACE *PVMBUS_TL_INTERFACE;

/* 1582 */
typedef int (__stdcall *pPipeAccept)(_VMBUS_PIPE *, WDFDEVICE__ *, _FILE_OBJECT *, const _VMBUS_PIPE_ACCEPT_PARAMETERS *);

/* 1610 */
typedef _VMBUS_CREATE_PIPE_INPUT_PARAMETERS *PVMBUS_CREATE_PIPE_INPUT_PARAMETERS;

/* 1639 */
typedef void (__stdcall *PFN_VMB_CHANNEL_STARTED)(VMBCHANNEL__ *);

/* 1667 */
typedef void (__stdcall *pPipeSetContext)(_VMBUS_PIPE *, void *);

/* 1677 */
typedef _VMB_CHANNEL_CLIENT_STATS *PVMB_CHANNEL_CLIENT_STATS;

/* 1685 */
typedef _VMBUS_LOCK_CHILD_PAGES_PARAMS *PVMBUS_LOCK_CHILD_PAGES_PARAMS;

/* 1689 */
typedef _VMBUS_GET_SERVICE_INFO_INPUT_PARAMETERS *PVMBUS_GET_SERVICE_INFO_INPUT_PARAMETERS;

/* 1710 */
typedef _VMBUS_FDO_CONTEXT *WDF_POINTER_TYPE_VMBUS_FDO_CONTEXT;

/* 1762 */
typedef void (__stdcall *PFN_CHANNEL_ARRIVAL_CALLBACK)(void *, WDFDEVICE__ *, _FILE_OBJECT *, _VMBUS_CHANNEL_OFFER *);

/* 1822 */
typedef _VMTRANSFER_PAGE_RANGES *PVMTRANSFER_PAGE_RANGES;

/* 1828 */
typedef int (__stdcall *pHvSocketProviderSetupPartition)(void *, WDFDEVICE__ *, _DEVICE_OBJECT *, void *, _GUID, void *, _VMBUS_TL_INTERFACE *, void **);

/* 1841 */
typedef _VMBUS_PIPE_INTERFACE *PVMBUS_PIPE_INTERFACE;

/* 1844 */
typedef void __stdcall EVT_CHANNEL_ARRIVAL_CALLBACK(void *, WDFDEVICE__ *, _FILE_OBJECT *, _VMBUS_CHANNEL_OFFER *);

/* 1883 */
typedef _VMB_CHANNEL_STATE_CHANGE_CALLBACKS *PVMB_CHANNEL_STATE_CHANGE_CALLBACKS;

/* 1916 */
typedef const _VMBUS_PIPE_ACCEPT_PARAMETERS *PCVMBUS_PIPE_ACCEPT_PARAMETERS;

/* 1961 */
typedef void __stdcall EVT_VMB_CHANNEL_STARTED(VMBCHANNEL__ *);

/* 1963 */
typedef _VMBUS_NODE *PVMBUS_NODE;

/* 1974 */
typedef _VMBUS_CRASH_INTERFACE *PVMBUS_CRASH_INTERFACE;

/* 2016 */
typedef _VMBUS_PROCESSOR *PVMBUS_PROCESSOR;

/* 2042 */
typedef int (__stdcall *pPipeWrite)(_VMBUS_PIPE *, _IRP *);

/* 2071 */
typedef _VMBUS_INTERFACE_STANDARD *PVMBUS_INTERFACE_STANDARD;

/* 2079 */
typedef _VMBUS_CRASH_PACKET_TYPE *PVMBUS_CRASH_PACKET_TYPE;

/* 2122 */
typedef void (__stdcall *pHvSocketProviderIncomingConnectNotification)(void *, WDFDEVICE__ *, _FILE_OBJECT *, _VMBUS_CHANNEL_OFFER *);

/* 2132 */
typedef int (__stdcall *pHvSocketProviderGetServiceInfo)(void *, _VMBUS_GET_SERVICE_INFO_INPUT_PARAMETERS *, _VMBUS_GET_SERVICE_INFO_OUTPUT_PARAMETERS *);

/* 2143 */
typedef _VMBUS_CRASH_PAGES *PVMBUS_CRASH_PAGES;

/* 2188 */
typedef void (__stdcall *pPipeClose)(_VMBUS_PIPE *);

/* 2206 */
typedef _VMBUS_QUERY_CHANNEL_PARAMETERS *PVMBUS_QUERY_CHANNEL_PARAMETERS;

/* 2230 */
typedef void (__stdcall *pPipeCompleteIndication)(_VMBUS_PIPE *, VMBUS_PIPE_INDICATION_CONTEXT__ *);

/* 2241 */
typedef _VMBUS_INSTANCE_CONTEXT *PVMBUS_INSTANCE_CONTEXT;

/* 2242 */
typedef int (__stdcall *pPipeOffer)(_VMBUS_PIPE *, WDFDEVICE__ *, void *, _GUID *, _VMBUS_CREATE_PIPE_INPUT_PARAMETERS *, unsigned __int8);

/* 2299 */
typedef _VMBUS_QUERY_SERVER_OPEN_CHANNEL_OUTPUT_PARAMETERS *PVMBUS_SERVER_OPEN_CHANNEL_OUTPUT_PARAMETERS;

/* 2328 */
typedef _VMBUS_DPC_ARRAY *PVMBUS_DPC_ARRAY;

/* 2333 */
typedef _VMBUS_GET_CRASH_INTERFACE_INPUT *PVMBUS_GET_CRASH_INTERFACE_INPUT;

