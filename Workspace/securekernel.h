typedef union _HV_INTERNAL_ACTIVITY_REGISTER
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 StartupSuspend : 1;
        HV_UINT64 HaltSuspend : 1;
        HV_UINT64 IdleSuspend : 1;
        HV_UINT64 RsvdZ : 61;
    };
} HV_INTERNAL_ACTIVITY_REGISTER, *PHV_INTERNAL_ACTIVITY_REGISTER;

typedef struct _HV_MIRRORING_NOTIFICATION_MESSAGE_PAYLOAD
{
    HV_UINT16 Status;
} HV_MIRRORING_NOTIFICATION_MESSAGE_PAYLOAD, *PHV_MIRRORING_NOTIFICATION_MESSAGE_PAYLOAD;

typedef union _HV_X64_REGISTER_SEV_CONTROL
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 EnableEncryptedState : 1;
        HV_UINT64 ReservedZ : 11;
        HV_UINT64 VmsaGpaPageNumber : 52;
    };
};

typedef union _HV_PARTITION_VSM_CONFIG
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 MaximumVtl : 4;
        HV_UINT64 Vtl0InterruptInjectionPolicy : 2;
        HV_UINT64 Vtl1InterruptInjectionPolicy : 2;
        HV_UINT64 ReservedZ : 56;
    };
};

typedef struct _HV_ARM64_INVALID_VP_REGISTER_MESSAGE
{
    HV_VP_INDEX VpIndex;
    HV_UINT32 Reserved;
};

typedef struct _HV_RDT_CAT_COS_BITMASK_PROPERTY
{
    HV_UINT32 CosIndex;
    HV_UINT32 CosBitmask;
};

typedef struct _HV_PARK_BLOCK_INFO
{
    HV_UINT32 ParkBlockOffset;
    HV_UINT32 ParkBlockSize;
};

typedef struct _HV_ENABLE_PARTITION_VTL_INTERCEPT_COMPLETION_DATA
{
    HV_UINT16 Status;
};

typedef struct _HV_X64_IO_PORT_READ_COMPLETION_DATA
{
    HV_UINT32 Value;
};

typedef union _HV_ARM64_LOGICAL_PROCESSOR_REGISTER_ADDRESS
{
    HV_REGISTER_NAME HvRegisterName;
};

typedef union _HV_PICO100_DURATION
{
    HV_UINT64 AsUINT64;
};

typedef struct _HV_GPA_ATTRIBUTE_INTERCEPT_MESSAGE
{
    HV_VP_INDEX VpIndex;
    HV_UINT32 RangeCount : 5;
    HV_UINT32 Adjust : 1;
    HV_UINT32 HostVisibility : 2;
    HV_UINT32 MemoryType : 6;
    HV_UINT32 Reserved : 18;
    _HV_GPA_PAGE_RANGE Ranges[29];
};

typedef union _HV_REGISTER_VSM_VP_WAIT_FOR_TLB_LOCK
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Wait : 1;
        HV_UINT64 ReservedZ : 63;
    };
};

typedef struct _HV_SNP_PSP_TCB_VERSION
{
    union
    {
        struct
        {
            HV_UINT64 BootLoader : 8;
            HV_UINT64 Tee : 8;
            HV_UINT64 ReservedZ : 32;
            HV_UINT64 Snp : 8;
            HV_UINT64 Microcode : 8;
        };
        HV_UINT64 AsUINT64;
    };
};

typedef struct __declspec(align(8)) _HV_INPUT_PROTO_CREATE_PERSISTED_CPU_GROUP
{
    HV_UINT64 CpuGroupId;
    HV_UINT16 LpIndexSetSize;
    HV_UINT16 LpIndexSetOffset;
};

typedef union _HV_VP_ASSIST_PAGE_ACTION
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Type : 8;
        HV_UINT64 Reserved : 56;
    };
};

typedef struct _HV_MINROOT_NUMA_LPS
{
    HV_UINT32 NodeIndex;
    HV_UINT64 Mask[32];
};

typedef union _HV_X64_MSR_VP_EXIT_REASON_CONTENTS
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT32 AdditionalReason;
        HV_UINT8 Reason;
        HV_UINT8 ReservedZ[3];
    };
};

typedef struct _HV_PARTITION_PROPERTY_ASSOC
{
    HV_PARTITION_PROPERTY_CODE PropertyCode;
    HV_UINT64 PropertyValue;
};

typedef struct _HV_ROOT_PASID_CAPABILITIES_PROPERTY
{
    HV_UINT32 SvmIommuCount;
    HV_UINT32 MinIommuPasidCount;
};

typedef union _HV_ARM64_DELIVERABILITY_NOTIFICATIONS_REGISTER
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 RsvdZ : 48;
        HV_UINT64 Sint : 16;
    };
};

typedef struct __declspec(align(8)) _HV_PSP_DEVICE
{
    union
    {
        struct __declspec(align(8))
        {
            HV_UINT64 MmConfigAddress;
            _HV_PCI_ID PciId;
            HV_UINT64 BridgeMmConfigAddress;
            _HV_PCI_ID BridgePciId;
            struct
            {
                HV_UINT32 Spa;
                HV_UINT32 PageCount;
            } Bar[6];
        } Pci;
        struct
        {
            HV_UINT64 FeatureRegister;
            HV_UINT64 InterruptEnableRegister;
            HV_UINT64 InterruptStatusRegister;
            HV_UINT8 SevMailboxInterruptId;
            HV_UINT8 RsvdZ[7];
            HV_UINT64 SevCmdRespRegister;
            HV_UINT64 SevCmdBufAddrLoRegister;
            HV_UINT64 SevCmdBufAddrHiRegister;
            HV_UINT64 AcpiCmdRespRegister;
        } AcpiV1;
        struct __declspec(align(8))
        {
            HV_UINT64 RegisterBase;
            HV_UINT32 RegisterPages;
            HV_UINT32 FeatureRegister;
            HV_UINT32 InterruptEnableRegister;
            HV_UINT32 InterruptStatusRegister;
            HV_UINT8 SevMailboxInterruptId;
            HV_UINT8 RsvdZ[3];
            HV_UINT32 SevCmdRespRegister;
            HV_UINT32 SevCmdBufAddrLoRegister;
            HV_UINT32 SevCmdBufAddrHiRegister;
            HV_UINT32 AcpiCmdRespRegister;
        } AcpiV2;
    };
    HV_UINT32 IsInitialized : 1;
    HV_UINT32 IsPci : 1;
    HV_UINT32 Reserved0 : 2;
    HV_UINT32 AcpiRevision : 4;
    HV_UINT32 Reserved1 : 24;
};

typedef struct _HV_SNP_PSP_DEVICES
{
    HV_UINT8 Count;
    _HV_PSP_DEVICE PspDevice[2];
};

typedef struct HV_EVENTLOG_EVENTGROUP_CONFIGURATION
{
    HV_UINT32 GroupId;
    HV_UINT16 RsvdZ;
    HV_UINT16 EventCount;
    HV_UINT8 EventId[256];
};

typedef struct _HV_INPUT_EVENTLOG_SET_EVENTS
{
    HV_EVENTLOG_TYPE EventLogType;
    HV_UINT32 GroupCount;
    HV_UINT64 ConfigurationFlags;
    HV_EVENTLOG_EVENTGROUP_CONFIGURATION Groups[2];
};

typedef union _HV_REGISTER_HVPT_CONTROL
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Enabled : 1;
        HV_UINT64 HardwareEnforced : 1;
        HV_UINT64 HardwareRangeBits : 6;
        HV_UINT64 ReservedZ : 4;
        HV_UINT64 GpaPageNumber : 52;
    };
};

typedef union _HV_PARTITION_PERFMON_MODE_CONFIG
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 PerfmonMode : 8;
        HV_UINT64 DisableCounting : 1;
        HV_UINT64 Reserved : 55;
    };
};

typedef union _HV_REGISTER_REFERENCE_TSC
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Enable : 1;
        HV_UINT64 ReservedP : 11;
        HV_UINT64 GpaPageNumber : 52;
    };
};

typedef struct __declspec(align(4)) _HV_ENABLE_PARTITION_VTL_INTERCEPT_MESSAGE
{
    HV_VP_INDEX VpIndex;
    HV_UINT8 TargetVtl;
    HV_UINT8 EnableMbec : 1;
    HV_UINT8 EnableSupervisorShadowStack : 1;
    HV_UINT8 EnableHardwareHvpt : 1;
};

typedef union _HV_REGISTER_PARTITION_INFO_PAGE
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Enabled : 1;
        HV_UINT64 Reserved : 11;
        HV_UINT64 GpaPage : 52;
    };
};

typedef union _HV_ARM64_EXCEPTION_INFO
{
    HV_UINT8 AsUINT8;
    struct
    {
        HV_UINT8 ErrorCodeValid : 1;
        HV_UINT8 Reserved : 7;
    };
};

typedef struct _HV_SEAM_TDMR_RESERVATION
{
    HV_UINT64 BaseAddress;
    HV_UINT64 Size;
};

typedef struct _HV_SEAM_TDMR
{
    HV_UINT64 BaseAddress;
    HV_UINT64 Size;
    HV_UINT64 Pamt1GBaseAddress;
    HV_UINT64 Pamt1GSize;
    HV_UINT64 Pamt2MBaseAddress;
    HV_UINT64 Pamt2MSize;
    HV_UINT64 Pamt4KBaseAddress;
    HV_UINT64 Pamt4KSize;
    HV_UINT64 NumReservedRegions;
    _HV_SEAM_TDMR_RESERVATION ReservedRegions[];
};

typedef union _HV_ARM64_REGISTER_VSM_CAPABILITIES
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 ReservedZ0 : 1;
        HV_UINT64 MbecVtlMask : 16;
        HV_UINT64 DenyLowerVtlStartup : 1;
        HV_UINT64 SupervisorShadowStack : 1;
        HV_UINT64 HardwareHvptAvailable : 1;
        HV_UINT64 SoftwareHvptAvailable : 1;
        HV_UINT64 HardwareHvptRangeBits : 6;
        HV_UINT64 InterceptPageAvailable : 1;
        HV_UINT64 ReturnActionAvailable : 1;
        HV_UINT64 Vtl0AliasMapAvailable : 1;
        HV_UINT64 InterceptNotPresentAvailable : 1;
        HV_UINT64 InstallInterceptEx : 1;
        HV_UINT64 ReservedZ : 32;
    };
};

typedef union _HV_REGISTER_GUEST_VSM_PARTITION_CONFIG
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 MaximumVtl : 4;
        HV_UINT64 Vtl0InterruptInjectionPolicy : 2;
        HV_UINT64 Vtl1InterruptInjectionPolicy : 2;
        HV_UINT64 ReservedZ : 56;
    };
};

typedef union _HV_X64_REGISTER_SEV_HV_DOORBELL
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Enabled : 1;
        HV_UINT64 ReservedZ : 11;
        HV_UINT64 PageNumber : 52;
    };
};

typedef union _HV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 NmiNotification : 1;
        HV_UINT64 InterruptNotification : 1;
        HV_UINT64 InterruptPriority : 4;
        HV_UINT64 RsvdZ : 42;
        HV_UINT64 Sint : 16;
    };
};

typedef union _HV_X64_REGISTER_SEV_GHCB
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Enabled : 1;
        HV_UINT64 ReservedZ : 11;
        HV_UINT64 PageNumber : 52;
    };
};

typedef struct _HV_GPA_ATTRIBUTE_INTERCEPT_COMPLETION_DATA
{
    HV_UINT16 Status;
};

typedef struct _HV_ARM64_UNSUPPORTED_FEATURE_MESSAGE
{
    HV_VP_INDEX VpIndex;
    _HV_ARM64_UNSUPPORTED_FEATURE_CODE FeatureCode;
    HV_UINT64 FeatureParameter;
};

typedef union _HV_EVENTLOG_EXTENDED_TRACE_FLAGS
{
    struct
    {
        HV_UINT64 Rsvd : 8;
        HV_UINT64 Id : 8;
        HV_UINT64 RsvdZ : 48;
    } Scenario;
    struct
    {
        HV_UINT64 Rsvd : 8;
        HV_UINT64 Operation : 8;
        HV_UINT64 RsvdZ : 48;
    } Granular;
    struct
    {
        HV_UINT64 Flags;
    } Legacy;
    struct
    {
        HV_UINT64 Extended : 1;
        HV_UINT64 Mode : 7;
        HV_UINT64 Rsvd : 56;
    } Common;
    HV_UINT64 AsUINT64;
};

typedef union _HV_PARTITION_DIAG_LOG_BUFFER_CONFIG
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT32 BufferCount;
        HV_UINT32 BufferSizeInPages;
    };
};

typedef union _HV_PARTITION_ENLIGHTENMENT_MODIFICATIONS
{
    struct
    {
        HV_UINT64 FavorAutoEoi : 1;
        HV_UINT64 FavorAutoEoiLegacyOs : 1;
        HV_UINT64 Rsvd : 62;
    };
    HV_UINT64 AsUINT64;
};

typedef struct _HV_INSUFFICIENT_MEMORY_MESSAGE_PAYLOAD
{
    HV_VP_INDEX VpIndex;
    HV_UINT16 Status;
    _HV_PROXIMITY_DOMAIN_INFO ProximityDomainInfo;
};

typedef union _HV_ARM64_REGISTER_TLBI_CONTROL
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 TlbiEnlightened : 1;
        HV_UINT64 Reserved : 63;
    };
};

typedef union _HV_SGX_LAUNCH_CONTROL_CONFIG
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Readable : 1;
        HV_UINT64 Writable : 1;
        HV_UINT64 Reserved : 62;
    };
};

typedef struct _HV_LOADER_PCI_SEGMENT_ENTRY
{
    HV_UINT16 SegmentNumber;
    HV_UINT64 ReservedDeviceBitmap[1024];
    struct
    {
        HV_UINT64 AtsBusBitmap[4];
        HV_UINT64 SecureIntegratedAtsDeviceBitmap[1024];
    } Intel;
};

typedef union _HV_VP_ASSIST_PAGE_ACTION_SIGNAL_EVENT
{
    HV_UINT64 AsUINT64[2];
    struct
    {
        HV_UINT64 Type : 8;
        HV_UINT64 Reserved : 56;
        HV_UINT32 TargetVp;
        HV_UINT8 TargetVtl;
        HV_UINT8 TargetSint;
        HV_UINT16 FlagNumber;
    };
};

typedef struct _HV_SYNIC_EVENT_INTERCEPT_MESSAGE
{
    HV_VP_INDEX VpIndex;
    HV_UINT32 Vtl : 4;
    HV_UINT32 Reserved : 28;
    _HV_CONNECTION_ID ConnectionId;
    HV_UINT32 FlagNumber;
};

typedef struct _HV_INPUT_GET_PARTITION_RESERVED_PAGES
{
    HV_UINT64 PartitionId;
    union
    {
        HV_UINT64 AsUINT64;
        struct
        {
            HV_UINT64 Continue : 1;
        };
    };
};

typedef struct _HV_RDT_MBA_COS_VALUE_PROPERTY
{
    HV_UINT32 CosIndex;
    HV_UINT32 CosThrottleValue;
};

typedef union _HV_PARTITION_PROCESSOR_VIRTUALIZATION_FEATURES
{
    struct
    {
        HV_UINT64 HideHypervisorPresent : 1;
        HV_UINT64 RsvdZ : 63;
    };
    HV_UINT64 AsUINT64;
};

typedef struct _HV_INPUT_GPA_PAGE_PINNING
{
    HV_UINT64 Reserved;
    _HV_GPA_PAGE_RANGE GpaRangeList[];
};

typedef struct _HV_OUTPUT_GET_PARTITION_RESERVED_PAGES
{
    union
    {
        HV_UINT64 AsUINT64;
        HV_UINT16 RangeCount;
    };
    _HV_SPA_PAGE_RANGE RangeList[511];
};

typedef union _HV_PARTITION_ISOLATION_CONTROL
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Runnable : 1;
        HV_UINT64 ReservedZ : 63;
    };
};

typedef union _HV_X64_MSR_VP_EXIT_INTERRUPT_CONTROL_CONTENTS
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT8 Vector;
        HV_UINT8 SampleRate;
        HV_UINT8 ReservedZ[6];
    };
};

typedef struct __declspec(align(8)) _HV_LOADER_IOMMU_ENTRY
{
    HV_UINT16 SegmentNumber;
    HV_UINT64 RegisterBaseAddress;
    HV_UINT32 Idr0;
    HV_UINT32 Idr1;
    HV_UINT32 Idr2;
    HV_UINT32 Idr3;
    HV_UINT32 Idr4;
    HV_UINT32 Idr5;
    HV_UINT32 Aidr;
    HV_UINT64 StreamTableBase;
    HV_UINT32 StreamTableSizeInPages;
    HV_UINT32 StrTabBaseCfg;
    HV_UINT32 Mpamidr;
};

typedef struct __declspec(align(8)) _HV_DEPRECATED_OUTPUT_QUERY_IOMMU_PROPERTIES
{
    union
    {
        struct
        {
            HV_UINT32 DeviceTableSizeInPages;
            HV_UINT64 DeviceTableSpaBasePage;
        } Amd;
        struct
        {
            HV_UINT32 ContextTableCount;
            HV_UINT32 InterruptRemappingTableSizeInPages;
            HV_UINT64 RootTableSpaPage;
            HV_UINT64 ContextTableSpaPages[256];
            HV_UINT64 InterruptRemappingTableSpaBasePage;
        } Intel;
    };
    union
    {
        struct
        {
            HV_UINT32 LiveDomainIdSelector : 1;
            HV_UINT32 Reserved : 31;
        };
        HV_UINT32 AsUINT32;
    } Flags;
};

typedef union _HV_CHECK_GPA_PAGE_VTL_ACCESS_RESULT
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT32 ResultCode : 8;
        HV_UINT32 DeniedAccess : 8;
        HV_UINT32 InterceptingVtl : 4;
        HV_UINT32 Reserved0 : 12;
        HV_UINT32 Reserved1;
    };
};

typedef union _HV_INSTRUCTION_EMULATION_HINTS_REGISTER
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 PartitionSecureVtlEnabled : 1;
        HV_UINT64 MbecUserExecuteControl : 1;
    };
};

typedef union _HV_ARM64_MSR_RESET_CONTENTS
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Reset : 1;
        HV_UINT64 ReservedZ : 63;
    };
};

typedef union _HV_PARTITION_ISOLATION_POLICY
{
    HV_UINT64 AsUINT64;
};

typedef struct _HV_PSP_REQUEST_COMPLETION_DATA
{
    _HV_PSP_STATUS PspStatus;
};

typedef struct __declspec(align(4)) _HV_SNP_PSP_ID
{
    HV_UINT8 Id[512];
    HV_UINT32 Size;
    HV_UINT8 Count;
};

typedef union HV_USER_MODE_HYPERCALLS
{
    struct
    {
        HV_UINT64 DispatchVp : 1;
        HV_UINT64 AssertVirtualInterrupt : 1;
        HV_UINT64 SignalEventDirect : 1;
        HV_UINT64 ReadGpa : 1;
        HV_UINT64 WriteGpa : 1;
        HV_UINT64 UnregisterInterceptResult : 1;
        HV_UINT64 TranslateVirtualAddressEx : 1;
        HV_UINT64 GetVpRegisters : 1;
        HV_UINT64 SetVpRegisters : 1;
        HV_UINT64 AssertDeviceInterrupt : 1;
        HV_UINT64 RetargetDeviceInterrupt : 1;
        HV_UINT64 PostMessageDirect : 1;
        HV_UINT64 GetVpCpuidValues : 1;
        HV_UINT64 GetVpSetFromMda : 1;
        HV_UINT64 Reserved : 50;
    };
    HV_UINT64 AsUINT64;
};

typedef union _HV_PARTITION_DEPOSIT_STATUS
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Success : 1;
        HV_UINT64 Async : 1;
        HV_UINT64 Remote : 1;
        HV_UINT64 Reserved : 61;
    };
};

typedef union _HV_IOMMU_GVA_RANGE
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 PageMaskShift : 6;
        HV_UINT64 Reserved : 6;
        HV_UINT64 PageNumber : 52;
    };
};

typedef union _HV_PARTITION_INFO_PAGE
{
    HV_UINT8 Padding[4096];
    HV_UINT32 TlbInUse;
};

typedef struct _HV_ARM64_TLB_PAGE_SIZE_MISMATCH_MESSAGE
{
    HV_VP_INDEX VpIndex;
    HV_UINT32 Reserved;
};

typedef struct _HV_ARM64_VOLATILE_GP_REGS
{
    HV_UINT64 X[18];
};

typedef union _HV_PARTITION_PAGE_ACCESS_TRACKING_CONFIG
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 Enabled : 1;
        HV_UINT64 Granularity : 2;
        HV_UINT64 RangeEnabled : 1;
        HV_UINT64 ReservedZ : 60;
    };
};

typedef struct __declspec(align(8)) _HV_MEMORY_PROXIMITY_INFO
{
    HV_UINT64 BaseAddress;
    HV_UINT64 EndAddress;
    HV_UINT32 ProximityDomainId;
};

typedef struct __declspec(align(8)) _HV_DMA_RANGE
{
    HV_UINT64 StartPage;
    HV_UINT32 PageCount;
};

typedef union _HV_VP_DISPATCH_LOOP_RESULT
{
    HV_UINT64 AsUINT64;
    struct
    {
        _HV_VP_DISPATCH_LOOP_EVENT ExitEvent;
        HV_UINT32 Reserved;
    };
};

typedef struct _HV_HYPERCALL_INTERCEPT_COMPLETION_DATA
{
    HV_UINT16 Status;
    HV_UINT8 OutputData[];
};

typedef struct _HV_INPUT_NOTIFY_EVENT_RING_EMPTY
{
    HV_UINT32 SintIndex;
    HV_UINT32 RsvdZ;
};

typedef union _HV_REGISTER_ISOLATION_CAPABILITIES
{
    HV_UINT64 AsUINT64;
    struct
    {
        HV_UINT64 ReservedZ : 64;
    };
};

typedef union _HV_SEC_FW_VERSION
{
    struct
    {
        HV_UINT64 Build : 32;
        HV_UINT64 MinorVersion : 8;
        HV_UINT64 MajorVersion : 8;
        HV_UINT64 Reserved : 16;
    } Snp;
    HV_UINT64 AsUINT64;
};

typedef struct _HV_RESTART_COMPLETION_MESSAGE_PAYLOAD
{
    HV_VP_INDEX VpIndex;
    _HV_RESTART_COMPLETION_TYPE CompletionType;
};

/* 9893 */
typedef _HV_REGISTER_PARTITION_INFO_PAGE HV_REGISTER_PARTITION_INFO_PAGE;

/* 9966 */
typedef _HV_PARTITION_DIAG_LOG_BUFFER_CONFIG HV_PARTITION_DIAG_LOG_BUFFER_CONFIG;

/* 10088 */
typedef _HV_INPUT_EVENTLOG_SET_EVENTS HV_INPUT_EVENTLOG_SET_EVENTS;

/* 10287 */
typedef _HV_SNP_PSP_ID *PHV_SNP_PSP_ID;

/* 10315 */
typedef _HV_ARM64_EXCEPTION_INFO *PHV_ARM64_EXCEPTION_INFO;

/* 10522 */
typedef _HV_RESTART_COMPLETION_MESSAGE_PAYLOAD *PHV_RESTART_COMPLETION_MESSAGE_PAYLOAD;

/* 10526 */
typedef _HV_IOMMU_GVA_RANGE *PHV_IOMMU_GVA_RANGE;

/* 10588 */
typedef _HV_MEMORY_PROXIMITY_INFO HV_MEMORY_PROXIMITY_INFO;

/* 10782 */
typedef _HV_ARM64_REGISTER_TLBI_CONTROL HV_ARM64_REGISTER_TLBI_CONTROL;

/* 10886 */
typedef _HV_PARTITION_INFO_PAGE HV_PARTITION_INFO_PAGE;

/* 11108 */
typedef HV_UINT64 HV_DEVICE_VA_PAGE_NUMBER;

/* 11235 */
typedef _HV_GPA_ATTRIBUTE_INTERCEPT_COMPLETION_DATA HV_GPA_ATTRIBUTE_INTERCEPT_COMPLETION_DATA;

/* 11254 */
typedef HV_UINT64 *PHV_MSI_ADDRESS;

/* 11323 */
typedef _HV_SNP_PSP_DEVICES HV_SNP_PSP_DEVICES;

/* 11517 */
typedef _HV_SEC_FW_VERSION HV_SEC_FW_VERSION;

/* 12026 */
typedef _HV_PARTITION_VSM_CONFIG *PHV_PARTITION_VSM_CONFIG;

/* 12044 */
typedef _HV_REGISTER_REFERENCE_TSC *PHV_REGISTER_REFERENCE_TSC;

/* 12169 */
typedef _HV_EVENTLOG_EXTENDED_TRACE_FLAGS *PHV_EVENTLOG_EXTENDED_TRACE_FLAGS;

/* 12242 */
typedef _HV_SGX_LAUNCH_CONTROL_CONFIG *PHV_SGX_LAUNCH_CONTROL_CONFIG;

/* 12252 */
typedef _HV_INPUT_GET_PARTITION_RESERVED_PAGES *PHV_INPUT_GET_PARTITION_RESERVED_PAGES;

/* 12515 */
typedef _HV_DEPRECATED_OUTPUT_QUERY_IOMMU_PROPERTIES *PHV_DEPRECATED_OUTPUT_QUERY_IOMMU_PROPERTIES;

/* 12552 */
typedef HV_EVENTLOG_EVENTGROUP_CONFIGURATION *PHV_EVENTLOG_EVENTGROUP_CONFIGURATION;

/* 12659 */
typedef _HV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER HV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER;

/* 12671 */
typedef _HV_PARTITION_PAGE_ACCESS_TRACKING_CONFIG HV_PARTITION_PAGE_ACCESS_TRACKING_CONFIG;

/* 12702 */
typedef _HV_PARK_BLOCK_INFO *PHV_PARK_BLOCK_INFO;

/* 12727 */
typedef _HV_SEAM_TDMR HV_SEAM_TDMR;

/* 12816 */
typedef HV_UINT32 *PHV_MODIFY_SPA_PAGE_HOST_ACCESS_FLAGS;

/* 12858 */
typedef _HV_PARTITION_PROPERTY_ASSOC *PHV_PARTITION_PROPERTY_ASSOC;

/* 12868 */
typedef HV_UINT64 *PHV_DEVICE_VA_PAGE_NUMBER;

/* 12874 */
typedef _HV_VP_ASSIST_PAGE_ACTION_SIGNAL_EVENT HV_VP_ASSIST_PAGE_ACTION_SIGNAL_EVENT;

/* 12887 */
typedef _HV_SEAM_TDMR_RESERVATION *PHV_SEAM_TDMR_RESERVATION;

/* 12922 */
typedef _HV_X64_MSR_VP_EXIT_REASON_CONTENTS HV_X64_MSR_VP_EXIT_REASON_CONTENTS;

/* 13138 */
typedef _HV_X64_REGISTER_SEV_HV_DOORBELL HV_X64_REGISTER_SEV_HV_DOORBELL;

/* 13164 */
typedef _HV_ROOT_PASID_CAPABILITIES_PROPERTY HV_ROOT_PASID_CAPABILITIES_PROPERTY;

/* 13250 */
typedef _HV_PARTITION_PAGE_ACCESS_TRACKING_CONFIG *PHV_PARTITION_PAGE_ACCESS_TRACKING_CONFIG;

/* 13341 */
typedef _HV_VP_ASSIST_PAGE_ACTION *PHV_VP_ASSIST_PAGE_ACTION;

/* 13357 */
typedef _HV_CHECK_GPA_PAGE_VTL_ACCESS_RESULT HV_CHECK_GPA_PAGE_VTL_ACCESS_RESULT;

/* 13368 */
typedef _HV_ARM64_LOGICAL_PROCESSOR_REGISTER_ADDRESS *PHV_ARM64_LOGICAL_PROCESSOR_REGISTER_ADDRESS;

/* 13416 */
typedef _HV_X64_REGISTER_SEV_GHCB HV_X64_REGISTER_SEV_GHCB;

/* 13470 */
typedef _HV_SNP_PSP_ID HV_SNP_PSP_ID;

/* 13502 */
typedef _HV_PARTITION_PROPERTY_ASSOC HV_PARTITION_PROPERTY_ASSOC;

/* 13533 */
typedef _HV_SGX_LAUNCH_CONTROL_CONFIG HV_SGX_LAUNCH_CONTROL_CONFIG;

/* 13673 */
typedef _HV_SNP_PSP_TCB_VERSION *PHV_SNP_PSP_TCB_VERSION;

/* 13692 */
typedef _HV_REGISTER_PARTITION_INFO_PAGE *PHV_REGISTER_PARTITION_INFO_PAGE;

/* 13703 */
typedef _HV_RDT_MBA_COS_VALUE_PROPERTY HV_RDT_MBA_COS_VALUE_PROPERTY;

/* 13748 */
typedef _HV_X64_IO_PORT_READ_COMPLETION_DATA HV_X64_IO_PORT_READ_COMPLETION_DATA;

/* 13857 */
typedef _HV_ARM64_MSR_RESET_CONTENTS *PHV_ARM64_MSR_RESET_CONTENTS;

/* 14070 */
typedef _HV_PARTITION_ISOLATION_CONTROL HV_PARTITION_ISOLATION_CONTROL;

/* 14071 */
typedef _HV_GPA_ATTRIBUTE_INTERCEPT_MESSAGE *PHV_GPA_ATTRIBUTE_INTERCEPT_MESSAGE;

/* 14132 */
typedef _HV_INPUT_NOTIFY_EVENT_RING_EMPTY *PHV_INPUT_NOTIFY_EVENT_RING_EMPTY;

/* 14153 */
typedef HV_UINT32 *PHV_UNMAP_GPA_FLAGS;

/* 14331 */
typedef _HV_MINROOT_NUMA_LPS HV_MINROOT_NUMA_LPS;

/* 14333 */
typedef HV_UINT32 HV_LOCK_GPA_PAGE_MAPPING_FLAGS;

/* 14473 */
typedef _HV_ARM64_LOGICAL_PROCESSOR_REGISTER_ADDRESS HV_ARM64_LOGICAL_PROCESSOR_REGISTER_ADDRESS;

/* 14517 */
typedef _HV_INSTRUCTION_EMULATION_HINTS_REGISTER *PHV_INSTRUCTION_EMULATION_HINTS_REGISTER;

/* 14530 */
typedef HV_UINT32 HV_MODIFY_SPA_PAGE_HOST_ACCESS_FLAGS;

/* 14776 */
typedef _HV_LOADER_PCI_SEGMENT_ENTRY *PHV_LOADER_PCI_SEGMENT_ENTRY;

/* 15041 */
typedef _HV_INPUT_GET_PARTITION_RESERVED_PAGES HV_INPUT_GET_PARTITION_RESERVED_PAGES;

/* 15124 */
typedef HV_USER_MODE_HYPERCALLS *PHV_USER_MODE_HYPERCALLS;

/* 15152 */
typedef _HV_ENABLE_PARTITION_VTL_INTERCEPT_COMPLETION_DATA *PHV_ENABLE_PARTITION_VTL_INTERCEPT_COMPLETION_DATA;

/* 15277 */
typedef _HV_INPUT_PROTO_CREATE_PERSISTED_CPU_GROUP HV_INPUT_PROTO_CREATE_PERSISTED_CPU_GROUP;

/* 15396 */
typedef _HV_ARM64_DELIVERABILITY_NOTIFICATIONS_REGISTER *PHV_ARM64_DELIVERABILITY_NOTIFICATIONS_REGISTER;

/* 15416 */
typedef _HV_REGISTER_ISOLATION_CAPABILITIES *PHV_REGISTER_ISOLATION_CAPABILITIES;

/* 15454 */
typedef _HV_INSTRUCTION_EMULATION_HINTS_REGISTER HV_INSTRUCTION_EMULATION_HINTS_REGISTER;

/* 15543 */
typedef _HV_PARTITION_ISOLATION_CONTROL *PHV_PARTITION_ISOLATION_CONTROL;

/* 16155 */
typedef const _HV_ARM64_LOGICAL_PROCESSOR_REGISTER_ADDRESS *PCHV_ARM64_LOGICAL_PROCESSOR_REGISTER_ADDRESS;

/* 16356 */
typedef _HV_HYPERCALL_INTERCEPT_COMPLETION_DATA HV_HYPERCALL_INTERCEPT_COMPLETION_DATA;

/* 16367 */
typedef _HV_PARTITION_PERFMON_MODE_CONFIG HV_PARTITION_PERFMON_MODE_CONFIG;

/* 16400 */
typedef HV_UINT32 *PHAL_HV_VIRTUAL_PROCESSOR_INDEX;

/* 16418 */
typedef _HV_ARM64_VOLATILE_GP_REGS *PHV_ARM64_VOLATILE_GP_REGS;

/* 16480 */
typedef _HV_VP_DISPATCH_LOOP_RESULT HV_VP_DISPATCH_LOOP_RESULT;

/* 16515 */
typedef _HV_PARTITION_DEPOSIT_STATUS *PHV_PARTITION_DEPOSIT_STATUS;

/* 16620 */
typedef _HV_ARM64_INVALID_VP_REGISTER_MESSAGE *PHV_ARM64_INVALID_VP_REGISTER_MESSAGE;

/* 16628 */
typedef _HV_PSP_REQUEST_COMPLETION_DATA *PHV_PSP_REQUEST_COMPLETION_DATA;

/* 16629 */
typedef _HV_REGISTER_GUEST_VSM_PARTITION_CONFIG *PHV_REGISTER_GUEST_VSM_PARTITION_CONFIG;

/* 16754 */
typedef _HV_ARM64_MSR_RESET_CONTENTS HV_ARM64_MSR_RESET_CONTENTS;

/* 16784 */
typedef _HV_DMA_RANGE HV_DMA_RANGE;

/* 16842 */
typedef _HV_X64_REGISTER_SEV_CONTROL *PHV_X64_REGISTER_SEV_CONTROL;

/* 16890 */
typedef HV_UINT32 *PHV_PRECOMMIT_GPA_FLAGS;

/* 16979 */
typedef _HV_SNP_PSP_DEVICES *PHV_SNP_PSP_DEVICES;

/* 17008 */
typedef _HV_ARM64_EXCEPTION_INFO HV_ARM64_EXCEPTION_INFO;

/* 17012 */
typedef _HV_ARM64_REGISTER_VSM_CAPABILITIES *PHV_ARM64_REGISTER_VSM_CAPABILITIES;

/* 17020 */
typedef _HV_ARM64_REGISTER_TLBI_CONTROL *PHV_ARM64_REGISTER_TLBI_CONTROL;

/* 17147 */
typedef _HV_RDT_CAT_COS_BITMASK_PROPERTY *PHV_RDT_CAT_COS_BITMASK_PROPERTY;

/* 17218 */
typedef _HV_REGISTER_REFERENCE_TSC HV_REGISTER_REFERENCE_TSC;

/* 17325 */
typedef _HV_OUTPUT_GET_PARTITION_RESERVED_PAGES HV_OUTPUT_GET_PARTITION_RESERVED_PAGES;

/* 17490 */
typedef _HV_ARM64_INVALID_VP_REGISTER_MESSAGE HV_ARM64_INVALID_VP_REGISTER_MESSAGE;

/* 17565 */
typedef _HV_ENABLE_PARTITION_VTL_INTERCEPT_COMPLETION_DATA HV_ENABLE_PARTITION_VTL_INTERCEPT_COMPLETION_DATA;

/* 17962 */
typedef _HV_CHECK_GPA_PAGE_VTL_ACCESS_RESULT *PHV_CHECK_GPA_PAGE_VTL_ACCESS_RESULT;

/* 18041 */
typedef HV_UINT32 HV_UNMAP_GPA_FLAGS;

/* 18046 */
typedef _HV_INPUT_GPA_PAGE_PINNING HV_INPUT_GPA_PAGE_PINNING;

/* 18180 */
typedef _HV_REGISTER_HVPT_CONTROL *PHV_REGISTER_HVPT_CONTROL;

/* 18250 */
typedef _HV_SEAM_TDMR *PHV_SEAM_TDMR;

/* 18488 */
typedef _HV_VP_DISPATCH_LOOP_RESULT *PHV_VP_DISPATCH_LOOP_RESULT;

/* 18603 */
typedef _HV_ENABLE_PARTITION_VTL_INTERCEPT_MESSAGE *PHV_ENABLE_PARTITION_VTL_INTERCEPT_MESSAGE;

/* 18687 */
typedef _HV_X64_REGISTER_SEV_GHCB *PHV_X64_REGISTER_SEV_GHCB;

/* 19054 */
typedef _HV_INPUT_NOTIFY_EVENT_RING_EMPTY HV_INPUT_NOTIFY_EVENT_RING_EMPTY;

/* 19058 */
typedef _HV_REGISTER_VSM_VP_WAIT_FOR_TLB_LOCK *PHV_REGISTER_VSM_VP_WAIT_FOR_TLB_LOCK;

/* 19231 */
typedef _HV_INSUFFICIENT_MEMORY_MESSAGE_PAYLOAD *PHV_INSUFFICIENT_MEMORY_MESSAGE_PAYLOAD;

/* 19251 */
typedef _HV_MINROOT_NUMA_LPS *PHV_MINROOT_NUMA_LPS;

/* 19321 */
typedef _HV_VP_ASSIST_PAGE_ACTION HV_VP_ASSIST_PAGE_ACTION;

/* 19334 */
typedef HV_UINT64 HV_KEY_ID;

/* 19347 */
typedef _HV_RDT_CAT_COS_BITMASK_PROPERTY HV_RDT_CAT_COS_BITMASK_PROPERTY;

/* 19562 */
typedef _HV_PARTITION_DEPOSIT_STATUS HV_PARTITION_DEPOSIT_STATUS;

/* 19584 */
typedef _HV_MEMORY_PROXIMITY_INFO *PHV_MEMORY_PROXIMITY_INFO;

/* 19616 */
typedef _HV_RESTART_COMPLETION_MESSAGE_PAYLOAD HV_RESTART_COMPLETION_MESSAGE_PAYLOAD;

/* 19617 */
typedef _HV_ARM64_TLB_PAGE_SIZE_MISMATCH_MESSAGE HV_ARM64_TLB_PAGE_SIZE_MISMATCH_MESSAGE;

/* 19792 */
typedef _HV_ARM64_TLB_PAGE_SIZE_MISMATCH_MESSAGE *PHV_ARM64_TLB_PAGE_SIZE_MISMATCH_MESSAGE;

/* 20039 */
typedef HV_UINT8 HV_IOMMU_STATUS_SEVERITY;

/* 20114 */
typedef _HV_PARTITION_VSM_CONFIG HV_PARTITION_VSM_CONFIG;

/* 20255 */
typedef _HV_ENABLE_PARTITION_VTL_INTERCEPT_MESSAGE HV_ENABLE_PARTITION_VTL_INTERCEPT_MESSAGE;

/* 20293 */
typedef _HV_LOADER_IOMMU_ENTRY *PHV_LOADER_IOMMU_ENTRY;

/* 20511 */
typedef HV_UINT32 HV_PRECOMMIT_GPA_FLAGS;

/* 20515 */
typedef _HV_PSP_DEVICE HV_PSP_DEVICE;

/* 20916 */
typedef HV_UINT32 *PHV_LOCK_GPA_PAGE_MAPPING_FLAGS;

/* 21112 */
typedef _HV_GPA_ATTRIBUTE_INTERCEPT_COMPLETION_DATA *PHV_GPA_ATTRIBUTE_INTERCEPT_COMPLETION_DATA;

/* 21203 */
typedef _HV_VP_ASSIST_PAGE_ACTION_SIGNAL_EVENT *PHV_VP_ASSIST_PAGE_ACTION_SIGNAL_EVENT;

/* 21378 */
typedef _HV_OUTPUT_GET_PARTITION_RESERVED_PAGES *PHV_OUTPUT_GET_PARTITION_RESERVED_PAGES;

/* 21603 */
typedef _HV_ARM64_REGISTER_VSM_CAPABILITIES HV_ARM64_REGISTER_VSM_CAPABILITIES;

/* 21641 */
typedef _HV_X64_MSR_VP_EXIT_REASON_CONTENTS *PHV_X64_MSR_VP_EXIT_REASON_CONTENTS;

/* 21835 */
typedef _HV_ARM64_VOLATILE_GP_REGS HV_ARM64_VOLATILE_GP_REGS;

/* 22057 */
typedef _HV_PARTITION_ISOLATION_POLICY HV_PARTITION_ISOLATION_POLICY;

/* 22244 */
typedef _HV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER *PHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER;

/* 22279 */
typedef _HV_PARK_BLOCK_INFO HV_PARK_BLOCK_INFO;

/* 22298 */
typedef _HV_X64_REGISTER_SEV_CONTROL HV_X64_REGISTER_SEV_CONTROL;

/* 22428 */
typedef _HV_INPUT_GPA_PAGE_PINNING *PHV_INPUT_GPA_PAGE_PINNING;

/* 22463 */
typedef _HV_X64_IO_PORT_READ_COMPLETION_DATA *PHV_X64_IO_PORT_READ_COMPLETION_DATA;

/* 22482 */
typedef _HV_X64_REGISTER_SEV_HV_DOORBELL *PHV_X64_REGISTER_SEV_HV_DOORBELL;

/* 22518 */
typedef _HV_PSP_DEVICE *PHV_PSP_DEVICE;

/* 22601 */
typedef _HV_SEAM_TDMR_RESERVATION HV_SEAM_TDMR_RESERVATION;

/* 22612 */
typedef _HV_DMA_RANGE *PHV_DMA_RANGE;

/* 22626 */
typedef HV_UINT8 *PHV_IOMMU_STATUS_SEVERITY;

/* 22627 */
typedef _HV_INPUT_EVENTLOG_SET_EVENTS *PHV_INPUT_EVENTLOG_SET_EVENTS;

/* 22656 */
typedef _HV_PICO100_DURATION HV_PICO100_DURATION;

/* 22780 */
typedef _HV_PSP_REQUEST_COMPLETION_DATA HV_PSP_REQUEST_COMPLETION_DATA;

/* 22808 */
typedef _HV_GPA_ATTRIBUTE_INTERCEPT_MESSAGE HV_GPA_ATTRIBUTE_INTERCEPT_MESSAGE;

/* 22850 */
typedef _HV_ARM64_UNSUPPORTED_FEATURE_MESSAGE *PHV_ARM64_UNSUPPORTED_FEATURE_MESSAGE;

/* 22855 */
typedef HV_UINT64 *PHV_KEY_ID;

/* 22965 */
typedef HV_UINT16 HV_IOMMU_STATUS;

/* 22974 */
typedef _HV_HYPERCALL_INTERCEPT_COMPLETION_DATA *PHV_HYPERCALL_INTERCEPT_COMPLETION_DATA;

/* 23091 */
typedef _HV_IOMMU_GVA_RANGE HV_IOMMU_GVA_RANGE;

/* 23209 */
typedef _HV_SYNIC_EVENT_INTERCEPT_MESSAGE HV_SYNIC_EVENT_INTERCEPT_MESSAGE;

/* 23598 */
typedef _HV_PARTITION_PROCESSOR_VIRTUALIZATION_FEATURES *PHV_PARTITION_PROCESSOR_VIRTUALIZATION_FEATURES;

/* 23748 */
typedef _HV_REGISTER_HVPT_CONTROL HV_REGISTER_HVPT_CONTROL;

/* 23759 */
typedef _HV_REGISTER_GUEST_VSM_PARTITION_CONFIG HV_REGISTER_GUEST_VSM_PARTITION_CONFIG;

/* 23933 */
typedef _HV_REGISTER_ISOLATION_CAPABILITIES HV_REGISTER_ISOLATION_CAPABILITIES;

/* 23954 */
typedef _HV_INSUFFICIENT_MEMORY_MESSAGE_PAYLOAD HV_INSUFFICIENT_MEMORY_MESSAGE_PAYLOAD;

/* 24085 */
typedef _HV_PARTITION_ENLIGHTENMENT_MODIFICATIONS HV_PARTITION_ENLIGHTENMENT_MODIFICATIONS;

/* 24124 */
typedef _HV_ROOT_PASID_CAPABILITIES_PROPERTY *PHV_ROOT_PASID_CAPABILITIES_PROPERTY;

/* 24216 */
typedef _HV_PARTITION_PROCESSOR_VIRTUALIZATION_FEATURES HV_PARTITION_PROCESSOR_VIRTUALIZATION_FEATURES;

/* 24387 */
typedef _HV_SNP_PSP_TCB_VERSION HV_SNP_PSP_TCB_VERSION;

/* 24439 */
typedef _HV_REGISTER_VSM_VP_WAIT_FOR_TLB_LOCK HV_REGISTER_VSM_VP_WAIT_FOR_TLB_LOCK;

/* 24447 */
typedef _HV_LOADER_IOMMU_ENTRY HV_LOADER_IOMMU_ENTRY;

/* 24613 */
typedef _HV_RDT_MBA_COS_VALUE_PROPERTY *PHV_RDT_MBA_COS_VALUE_PROPERTY;

/* 24713 */
typedef _HV_SEC_FW_VERSION *PHV_SEC_FW_VERSION;

/* 24745 */
typedef _HV_DEPRECATED_OUTPUT_QUERY_IOMMU_PROPERTIES HV_DEPRECATED_OUTPUT_QUERY_IOMMU_PROPERTIES;

/* 24871 */
typedef _HV_EVENTLOG_EXTENDED_TRACE_FLAGS HV_EVENTLOG_EXTENDED_TRACE_FLAGS;

/* 24897 */
typedef _HV_ARM64_UNSUPPORTED_FEATURE_MESSAGE HV_ARM64_UNSUPPORTED_FEATURE_MESSAGE;

/* 24930 */
typedef HV_UINT16 *PHV_IOMMU_STATUS;

/* 24978 */
typedef _HV_PARTITION_ISOLATION_POLICY *PHV_PARTITION_ISOLATION_POLICY;

/* 25156 */
typedef _HV_PARTITION_ENLIGHTENMENT_MODIFICATIONS *PHV_PARTITION_ENLIGHTENMENT_MODIFICATIONS;

/* 25278 */
typedef _HV_ARM64_DELIVERABILITY_NOTIFICATIONS_REGISTER HV_ARM64_DELIVERABILITY_NOTIFICATIONS_REGISTER;

/* 25296 */
typedef _HV_LOADER_PCI_SEGMENT_ENTRY HV_LOADER_PCI_SEGMENT_ENTRY;

/* 25313 */
typedef HV_UINT64 HV_MSI_ADDRESS;

/* 25358 */
typedef _HV_X64_MSR_VP_EXIT_INTERRUPT_CONTROL_CONTENTS HV_X64_MSR_VP_EXIT_INTERRUPT_CONTROL_CONTENTS;

/* 25445 */
typedef HV_UINT32 *PHAL_HV_LOGICAL_PROCESSOR_INDEX;

/* 25686 */
typedef _HV_PARTITION_INFO_PAGE *PHV_PARTITION_INFO_PAGE;

/* 25869 */
typedef _HV_PARTITION_DIAG_LOG_BUFFER_CONFIG *PHV_PARTITION_DIAG_LOG_BUFFER_CONFIG;

/* 25873 */
typedef _HV_INPUT_PROTO_CREATE_PERSISTED_CPU_GROUP *PHV_INPUT_PROTO_CREATE_PERSISTED_CPU_GROUP;

/* 25916 */
typedef _HV_X64_MSR_VP_EXIT_INTERRUPT_CONTROL_CONTENTS *PHV_X64_MSR_VP_EXIT_INTERRUPT_CONTROL_CONTENTS;

/* 26022 */
typedef _HV_SYNIC_EVENT_INTERCEPT_MESSAGE *PHV_SYNIC_EVENT_INTERCEPT_MESSAGE;

/* 26048 */
typedef _HV_PARTITION_PERFMON_MODE_CONFIG *PHV_PARTITION_PERFMON_MODE_CONFIG;
